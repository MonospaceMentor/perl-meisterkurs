== Perl-Grundlagen


[quote, Larry Wall]
____
Live and let learn, that's my policy.
____


=== Was ist Perl?

Perl ist eine freie, plattformunabhängige und interpretierte Programmiersprache. Sie wurde von dem Linguisten Larry Wall 1987 als Synthese aus C, den UNIX-Befehlen und anderen Einflüssen entworfen.

Hauptziele der Sprache sind die schnelle Lösung von Problemen und die größtmögliche Freiheit für Programmierer. Ihre Stärken liegen in mächtigen Funktionen für die Verarbeitung von Texten und im riesigen Umfang frei verfügbarer Zusatzmodule.

Ursprünglich als Werkzeug zur System- und Netzwerkadministration vorgesehen, hat Perl auch bei der Entwicklung von Webanwendungen und zum Beispiel in der Bioinformatik weite Verbreitung gefunden.

Eine ausführliche Beschreibung findet sich in der http://www.wikipedia.de/wiki/Perl[Wikipedia] unter ``Perl''.

Perl ist eine sogenannte ``Interpreter-Sprache''. Das bedeutet, dass für die Ausführung von Perl-Programmen eine Software notwendig ist, die den Quelltext interpretiert und seine Anweisungen ausführt. Dieser Interpreter ist ein Programm namens `perl`.

Der Interpreter wird meist von einer Kommandozeile aus gestartet. Aber es auch möglich, ihn durch eine im Hintergrund laufende Software wie `cron` starten zu lassen. Als Webanwendung konzipierte Perl-Programme wiederum werden durch die Webserver-Software gestartet, wenn bestimmte URLs abgefragt werden.




=== Installation

Die indexterm:[Installation] Installation von Perl kann durch Compilieren des Perl-Quellcodes oder als fertige Binärdateien erfolgen.

Von der http://www.perl.com[Perl-Homepage] kann der Quellcode des Perl-Interpreters und der Standard-Module heruntergeladen werden, um ihn für das eigene Betriebssystem selbst zu bauen. Dazu muss Software installiert sein, um den Quellcode zu einem ausführbaren Programm zu compilieren. Diese Art der Installation sollte durch erfahrene Systemadministratoren durchgeführt werden.

Für alle gängigen Betriebssysteme gibt es aber einen leichteren Weg über betriebsfertig zusammengestellte Perl-Distributionen. Diese Distributionen enthalten alles Notwendige, um sofort mit der Entwicklung von Perl-Programmen beginnen zu können.

Für Windows bietet die Firma http://www.activestate.com[Activestate] ein komplettes Perl-Paket an. Alternativ ist auch  http://win32.perl.org/wiki/index.php?title=Strawberry\_Perl[Strawberry Perl] interessant, das eine vollständige Perl-Umgebung inklusive C-Compiler (für die Installation zusätzlicher Module) enthält.

Mac OS X verfügt in der Regel bereits im Lieferzustand über einen installierten Perl-Interpreter.

Auf Debian GNU/Linux und verwandten Linux-Distributionen wie Ubuntu Linux kann Perl mit einem einfachen Kommando installiert werden:

----
$ sudo apt-get install perl
----

Bei anderen Linux-Distributionen nutzen Sie die jeweils vorgesehenen Installationsverfahren. footnote:[Helfen Sie mit! Wenn Sie mir das bei der von Ihnen verwendeten Distribution verwendete Verfahren in einer E-Mail beschreiben, stelle ich es an dieser Stelle gerne vor.]



=== Hilfe und Dokumentation

Meist wird mit der Perl-Distribution auch die Grund-Dokumentation installiert. Auf manchen Debian-Varianten ist sie gesondert zu installieren:

----
$ sudo apt-get install perl-doc
----

Die Dokumentation ist hier im indexterm:[Manpage] Unix-Manpage-Format vorhanden. Mit dem Kommando `man` können diese im Terminal angezeigt werden. Die Einstiegs-Manpage lautet sinnigerweise `perl`, das Kommando `man perl`` zeigt sie an. Hier finden Sie Detailinformationen zum Aufruf des Perl-Interpreters und eine Liste weiter führender Manpages. Darunter sind zum Beispiel:

|============================================================
| `perlfaq`  | Antworten auf oft gestellte Fragen
| `perlsyn`  | Die grundlegende Syntax von Perl-Programmen
| `perldata` | Datentypen
| `perlop`   | Ausdrücke und Operatoren
| `perlfunc` | In Perl eingebaute Funktionen
| `perlre`   | Reguläre Ausdrücke in Perl
| `perlsub`  | Erstellung von Unterprogrammen
|============================================================

Zusätzlich kann in Perl-Quellcode eingebaute Dokumentation im indexterm:[POD] POD-Format (``plain old documentation'') mit Hilfe des Kommandos `perldoc` extrahiert werden. Diesem Kommando gibt man einfach den Dateinamen des betreffenden Programms als Argument mit:

----
perldoc programm.pl
----

Auch für das POD-Format gibt es natürlich eine Manpage, nämlich `perlpod`.

	

=== Quellen zu Perl


==== Literatur

Eine große Auswahl an Perl-Büchern bietet traditionell der O'Reilly-Verlag.

``http://p.geewiz.de/amazon/3897211440[Programmieren mit Perl]'' (ISBN 3897211440) ist das Referenzbuch zu Perl, an dem Perl-Erfinder Larry Wall natürlich maßgeblich mitgewirkt hat. Es eignet sich am besten zum Nachschlagen von Spracheigenschaften.

Von Randal L. Schwartz und Tom Phoenix wurde die ``http://p.geewiz.de/amazon/3897211475[Einführung in Perl]'' (ISBN 3897211475) geschrieben. Randal Schwartz griff dabei auf seine langjährige Erfahrung als Perl-Trainer zurück. Wie diese Schulungsunterlage enthält jedes Kapitel des hervorragenden Einsteigerbuches auch Verständnisfragen und Übungen.

Eine gute Ergänzung zu den vorgenannten Büchern ist das ``http://p.geewiz.de/amazon/3897213664[Perl Kochbuch]'' (ISBN 3897213664) von Tom Christiansen und Nathan Torkington. Es enthält hilfreiche Praxisbeispiele aus allen wichtigen Gebieten der Perl-Programmierung. Die üblichen Fragen beginnender wie auch fortgeschrittener Perl-Entwickler (``Wie kann ich in Perl...'') werden hier in mit kurzen Programmbeispielen beantwortet und diese Beispiele jeweils in Form einer kurzen Diskussion erklärt.


==== World Wide Web

Natürlich finden sich auch im Internet unzählige Quellen zur Perl-Programmierung. Hier nur eine kurze Auswahl von Websites, über die man effektiv zu Informationen und weiterführenden Links gelangt:

* http://www.perl.com[Perl.com] ist die offizielle Perl-Homepage.
* Über Neuigkeiten aus der Perl-Szene berichtet ``http://use.perl.org[use Perl;]''.
* Das Perl-Weblog des Autors finden Sie auf http://www.perl-programmieren.de[Perl-Programmieren.de]. Von hier können Sie auch den Podcast ``Radio Perl`'' beziehen, mit dem der Autor über interessante Themen und Nachrichten aus der Perl-Szene berichtet.
* Die http://pinboard.in/u:geewiz/t:perl/[Perl-Links] des Autors
    finden Sie auf der Bookmarking-Website http://pinboard.in[pinboard].
* Ein weiterer guter Anlaufpunkt für Fragen rund um die Perl-Programmierung ist die deutschsprachige http://www.perl-community.de[Perl-Community]. Sie bietet unter anderem ein Forum und ein Wiki, zu denen viele Perl-Anwender beitragen.
  

=== Editoren

Für die Eingabe von Perl-Programmen reicht ein einfacher indexterm:[Texteditor] Texteditor. Sie haben unter jedem Betriebssystem eine reichhaltige Auswahl, die von kleinen Programmen bis zu ausgewachsenen Entwicklungsumgebungen reicht.

Nützliche Eigenschaften eines guten Perl-Editors sind:

Syntax Highlighting::
    Verschiedene Programmelemente werden in
    unterschiedlichen Farben dargestellt. Dies hilft, den Überblick über
    den Code zu behalten und Flüchtigkeitsfehler, z.B. nicht
    geschlossene Anführungszeichen, zu entdecken.
Auto Indent::
    Einrückung ist eine wichtige Voraussetzung, um die
    Struktur des Programms darzustellen. Ein Editor, der dies
    automatisch erledigt, erspart viel Arbeit.
Folding::
    Die Fähigkeit, ganze Abschnitte eines Programms
    auszublenden, hilft dabei, sich auch in großen Dateien schnell zu
    bewegen.
Klammeranzeige::
    In Perl-Programmen kommen vielfach
    ineinander verschachtelte Klammerpaare vor. Wenn der Editor diese
    hervorheben kann, finden Sie schnell das Pendant zu einem bestimmten
    Klammerzeichen und sehen, ob alle Paare vollständig sind.

Die Anzahl guter Editorprogramme ist kaum zu überschauen. Die Auswahl
hängt oft nicht nur vom Funktionsumfang, sondern auch von persönlichen
Vorlieben ab. Interessante Kandidaten sind:

* http://www.gnu.org/software/emacs/[GNU Emacs] (Linux, Windows)
* http://www.jedit.org[JEdit] (Linux, Windows, Mac OS X)
* http://macromates.com/[TextMate] (Mac OS X)
* http://notepad-plus.sourceforge.net/uk/site.htm[Notepad++] (Windows)
* die plattformunabhängige http://www.eclipse.org[Eclipse IDE] mit http://e-p-i-c.sourceforge.net/[EPIC] (``Eclipse Perl Integration'') Plugin

Letztlich ist es Sache der persönlichen Vorlieben, für welche Programmierumgebung man sich entscheidet.



=== Der Ablauf von Perl-Programmen


==== Der Interpreter

Ein Perl-Programm ist nicht selbständig lauffähig, sondern es wird
immer ein installierter Perl-Interpreter benötigt. Dieser liest die
Programmdatei sowie gegebenenfalls weitere damit zusammenhängende
Dateien und arbeitet die enthaltenen Anweisungen ab.

Dies erfolgt in mehreren Phasen:

1. In der _Compile-Phase_ wird das Programm analysiert, auf syntaktische Korrektheit geprüft und schließlich in sogenannten ``Zwischencode'' umgewandelt. Das ist ein internes Anweisungsformat, das der Interpreter effizient abarbeiten kann. Treten in dieser Phase Fehler auf, wird der Ablauf mit einer Fehlermeldung abgebrochen, noch bevor die Anweisungen des Programms ausgeführt werden.
2. In der _Ausführungs-Phase_ führt der Interpreter den vorbereiteten Zwischencode aus. Fehler, die in dieser Phase auftreten, werden als ``Laufzeitfehler'' bezeichnet. Viele dieser Fehler können durch das Programm selbst erkannt und behandelt werden.
  

==== Anweisungen und Funktionen

Ein Perl-Programm besteht aus einzelnen indexterm:[Anweisung] Anweisungen (manchmal nur eine, manchmal viele tausend), die vom Perl-Interpreter abgearbeitet werden.

Bei Scripts der meisten Unix-Shells muss ein Backslash `\` ans Zeilenende gestellt werden, wenn eine Anweisung in der Folgezeile fortgesetzt werden soll. Bei Perl hingegen werden alle Anweisungen mit einem Semikolon `;` abgeschlossen. Daher können sich Perl-Anweisungen problemlos über mehrere Programmzeilen erstrecken, ohne dass angezeigt werden muss, dass das Zeilenende nicht gleichbedeutend mit dem Anweisungsende ist.

Für Perl-Programme wurde die Namenserweiterung `.pl` eingeführt. Unser erstes Programm soll daher `hello.pl` heißen (siehe Listing ``hello.pl''). Geben Sie es mit dem Editorprogramm Ihrer Wahl ein.

[source,perl]
----
#!/usr/bin/perl

print "Hallo Welt!\n";
----

Die meisten Anweisungen in Perl benötigen Daten, die sie dann verarbeiten. Das kann ein Text sein, der ausgegeben werden soll, der Name einer Datei, die das Programm lesen soll, oder Werte, mit denen eine Berechnung durchzuführen ist. Solche Daten nennt man ``Parameter'' oder ``Argumente''. Sie werden nach dem Namen der Anweisung aufgezählt, durch Kommata getrennt und in runden Klammern eingerahmt.

Oft erzeugen diese Anweisungen mit Hilfe ihrer Parameter ein Ergebnis, das nach ihrer Ausführung weiterverarbeitet werden kann. Anweisungen dieser Art, die einen Wert liefern, werden als indexterm:[Funktion] ``Funktion'' bezeichnet. Vielleicht kennen Sie den Begriff aus der Mathematik, und genau so ist er auch hier gemeint. Die trigonometrische Funktion `sin` zum Beispiel gibt es auch in Perl und sie berechnet den Sinus aus dem Winkel, den man ihr als Parameter übergibt. Wie Sie die in Perl eingebauten Funktionen anwenden und sogar eigene Funktionen programmieren können, lernen Sie in einem späteren Kapitel.


==== Blöcke

Eine Folge von Programmzeilen, die in einem engen Sinnzusammenhang stehen, können durch geschweifte Klammern zu einem Block zusammengefasst werden. Meist werden Anweisungen in einem Block eingefasst, um ihre Ausführung zu wiederholen oder von einer Bedingung abhängig zu machen.

[source,perl]
----
{
  print "Drei Mann";
  print "in einem Block";
  print "die fest zusammenhalten";
}
print "Ich bin aussen vor. :-(";
----

Blöcke können geschachtelt werden. Um diese Schachtelung übersichtlich darzustellen, ist eine saubere Einrückung der Blöcke empfehlenswert: Je tiefer die Ebene eines Blocks ist, desto weiter wird er eingerückt. Im Idealfall übernimmt das Editorprogramm, das Sie zur Eingabe verwenden, dies automatisch.

[source,perl]
----
print "Draussen";
{
  print "In Block 1";
  {
    print "In Block 2 innerhalb Block 1";
  }
  print "Zurueck in Block 1";
}
print "Und wieder draussen";</code></pre>
----


=== Ausführen von Perl-Programmen

Die Ausführung eines Perl-Programms ist sehr direkt möglich. Weil
es sich bei Perl um eine Interpretersprache handelt, muss das Programm
nicht erst aufwändig in Binärcode compiliert werden, um ausführbar zu
sein. Zunächst muss schlicht der Perl-Interpreter installiert sein,
denn dieser führt das Programm aus.

Um `hello.pl` aus Listing ``hello.pl'' zu starten, führen Sie in einer Kommandozeile (der Linux-Shell oder der Windows-Eingabeaufforderung) den Perl-Interpreter aus und übergeben ihm den Namen der Programmdatei als Parameter:

----
$ perl hello.pl
----

Wenn ein Programm wenige Anweisungen umfasst und diese nur einmalig ausgeführt werden sollen, lohnt es sich nicht, dafür eine eigene Datei zu erstellen. Die Anweisungen können dann dank einer Option des Interpreters direkt auf der Kommandozeile eingegeben werden. Sie werden einfach hinter der Option  `-e` in Anführungszeichen (am besten benutzt man hier Apostrophe/Hochkommata) angegeben:

----
$ perl -e 'print "Hallo!\n"'
----

Jedes größere Programm wird man aber in einer Datei oder sogar auf
mehrere Dateien verteilt abspeichern, um es beliebig oft ausführen zu
können. Dann möchte man es wahrscheinlich aber auch wie jedes andere
Programm starten, nämlich lediglich durch Eingabe des Programmnamens
&mdash; ohne den Interpreter vornedran:

----
$ ./hello.pl
----

Zwei Maßnahmen machen das möglich. Zunächst muss das Programm als ausführbar gekennzeichnet werden. Unter Linux erledigt das das Kommando `chmod +x hello.pl`. Jetzt weiß die Linux-Shell zwar, dass sie das Programm ausführen kann und darf, aber ohne weitere Informationen würde sie es als Shell-Programm interpretieren -- und natürlich kläglich scheitern. Dieses Problem löst die sogenannte ``Shebang-Zeile'': beginnt die erste Zeile der auszuführenden Datei nämlich mit den Zeichen `#!`, führt die Shell das anschließend genannte Programm aus und gibt diesem den Dateinamen als Argument mit. Für Perl-Programme sieht die Shebang-Zeile üblicherweise so aus:

[source,perl]
----
#!/usr/bin/perl
----

Das heißt, die Shell wird bei Ausführung des Programms zunächst den Perl-Interpreter im Verzeichnis `/usr/bin/` ausführen und ihm den Namen des Perl-Programms als Argument übergeben, sodass er es dann ausführt.

Die führende Pfadangabe `./` beim Aufruf des Programms stellt übrigens sicher, dass die Shell das Programm gleich im aktuellen Arbeitsverzeichnis sucht. Je nach Shell-Konfiguration kommt es sonst zu einer Fehlermeldung.


=== Programmierstil

Bevor wir in die Perl-Programmierung einsteigen, lassen Sie mich noch einige Worte zum Thema ``Programmierstil'' sagen. Programmierstil ist die Art, wie Sie ein Perl-Programm aufbauen. Das zentrale Motto bei Perl lautet:

[quote]
____
There Is More Than One Way To Do It. (TIMTOWTDI)
____

So, wie bekanntlich viele Wege nach Rom führen, gibt es auch in Perl viele alternative Ansätze, über die Sie Ihr Ziel erreichen können. Es hängt von Ihren Entscheidungen ab, ob Ihr Programm schnell und robust ist. Robustheit meint in diesem Zusammenhang, dass sich Ihr Programm nicht schon von einem kleinen Problem aus dem Takt bringen lässt.

Ebenso hängt es von Ihren Entscheidungen ab, ob Ihre Programme gut zu verstehen sind. Manche mögen an dieser Stelle einwenden: ``Wenn ich korrektes Perl programmiere, wird es der Interpreter auch verstehen. Was heisst hier 'gut' oder 'schlecht'?'' Es geht gar nicht um den Interpreter, sondern um Sie selbst und andere Personen, die Ihr Programm pflegen, korrigieren und weiterentwickeln wollen oder müssen. Sie sollten es zum Ziel haben, dass jemand sich schnell in Ihr Programm einarbeiten und seine Funktion gut verstehen kann. Dieser Jemand könnte ein Kollege sein, mit dem Sie sich die Arbeit teilen, ein Nachfolger, der die Pflege Ihres Programms übernehmen soll &mdash; oder schlichtweg Sie selbst nach einem halben Jahr Programmierpause!

Damien Conway stellt gleich zu Beginn seines sehr empfehlenswerten Buchs
http://p.jochen-lillich.de/amazon/0596001738[Perl Best Practices]
eine sehr anschauliche Regel auf:

IMPORTANT: Programmieren Sie immer so, als ob der Kerl, der Ihren Code am Ende     pflegen muss, ein gewalttätiger Psychopath ist, der weiß, wo Sie wohnen.

Guter Programmierstil ist Erfahrungssache und Sie werden sich im Laufe der Zeit viele sinnvolle Praktiken aneignen. Um diesen manchmal schmerzhaften Lernprozess zu beschleunigen, werde ich im Folgenden gleich einmal einige wichtige Erkenntnisse aufzählen, die ich Ihnen ans Herz legen möchte.


==== Übersichtlichkeit

Beim Programmieren sollten Sie von Anfang an darauf achten, dass Ihr Programmcode übersichtlich ist. Dies erleichtert Ihnen den Überblick, weil Sie die Struktur des Programms schon an der Gliederung des Codes ablesen können.

Es ist zum Beispiel empfehlenswert, jede einzelne Anweisung des Programms in eine eigene Zeile zu schreiben. Perl es erlaubt es, beliebig viele Anweisungen in eine Zeile zu unterzubringen &mdash; Sie könnten sogar ein ganzes Programm in eine Zeile packen. Aber während der Interpreter sich davon nicht verwirren lässt, gehen einem Menschen schnell die Augen über, wenn er mit einem solchen Wust an Code konfrontiert wird. Verteilen Sie ihre Anweisungen also besser vertikal statt horizontal.

Eine weitere Hilfe, die Struktur eines Programms optisch widerzuspiegeln, ist Einrückung. Viele Konstrukte eines Programms sind ineinander geschachtelt, und das kann man durch verschieden weite Einrückung sichtbar machen. Geben Sie jedem Block in Ihrem Programm eine passende Einrückungstiefe, und Sie sehen sofort, auf welcher Schachtelungsebene er liegt. Vielfach übernimmt diese Aufgabe sogar Ihr Editorprogramm für Sie.

Diese und weitere Empfehlungen der Perl-Autoren für guten Programmierstil finden Sie in der Manpage mit dem Namen `perlstyle`. Schauen Sie gleich mal rein!


==== Interpreter-Warnungen nutzen

Ein Wächter über sauberen Programmierstil ist auch die Interpreter-Option `-w`. Sie sorgt dafür, dass Perl Warnungen vor gefährlichen Programmkonstrukten ausgibt. Gemeint sind hier nicht Programmierfehler, bei denen dem Interpreter nichts anderes übrig bleibt, als die Ausführung des Programms abzubrechen. Daneben gibt es nämlich auch Praktiken, die durchaus legitim sein können und die keinen Abbruch rechtfertigen, die aber Fehlerquellen darstellen können. In solchen Fällen gibt der Perl-Interpreter dann eine Warnung aus, wenn Sie ihm das mit `-w` erlauben.

Am besten fügt man die Option direkt hinter der Shebang-Zeile ein:

[source,perl]
----
#!/usr/bin/perl -w
----

Inzwischen wird die Warn-Option meist durch die Anweisung

[source,perl]
----
use warnings;
----

ersetzt, die man am besten dem Programm voranstellt.

[source,perl]
----
#!/usr/bin/perl
use warnings;
----

Übrigens: Solche Anweisungen, die das Verhalten des Perl-Interpreters
beeinflussen, bezeichnet man als indexterm:[Pragma] ``Pragmas''.

Ich halte es für guten Stil, durch defensive Programmierung dafür zu sorgen, dass auch bei eingeschalteten Warnungen bei der Ausführung des Programms keine einzige ausgegeben wird.



==== Namensregeln

Die meisten Sprachkonstrukte werden in einem Perl-Programm mehrfach vorkommen. Um diese Konstrukte dann unterscheiden zu können, müssen sie mit eindeutigen Namen, sogenannten Bezeichnern, versehen werden.

Für Bezeichner gelten in Perl folgende Regeln:

* Bezeichner dürfen nur aus Buchstaben, Ziffern und Unterstrich
bestehen.
* Bezeichner müssen mit einem Buchstaben oder Unterstrich
beginnen.
* Bezeichner dürfen keine Leerzeichen enthalten.
* Bei Bezeichnern wird Groß- und Kleinschreibung
unterschieden.

Damit ein Programm später noch gelesen und verstanden werden kann (und zwar auch durch Andere), sollten Bezeichner so gewählt werden, dass sie Auskunft über Sinn und Zweck des jeweiligen Konstrukts geben. ``Sprechende'' Bezeichner wie `KundenNummer` sind also Kurzformen wie `kn` vorzuziehen.


===== Übung

Welche der folgenden Konstrukte sind keine Bezeichner?

* `x`
* `"Hallo"`
* `Dies_Ist_Ein_Bezeichner`
* `%muster%`
* `1024`
* `eins2drei`
* `Zweifel?`


==== Kommentare

Ein Kommentar wird durch `#` eingeleitet. Alles, was in der selben Zeile diesem Kommentarzeichen folgt, wird vom Perl-Interpreter ignoriert.

Kommentare haben zwar keinen Einfluss auf das Verhalten des Programms, aber sie sind immens wichtig für dessen Dokumentation. Den Wert sinnvoller Kommentare weiß man vor allem dann zu schätzen, wenn man ein Programm pflegen soll, das man nicht gut kennt. Es könnte ein Programm eines anderen Entwicklers sein, oder aber auch ein Programm, das man vor längerer Zeit selbst geschrieben hat. In beiden Fällen helfen eingestreute Kommentare beim Verständnis des Programmablaufs und derjenigen Konstrukte, deren Funktionsweise nicht offensichtlich und selbsterklärend ist.

Es gibt unter Software-Entwicklern die Regel ``Nach sechs Monaten spielt es keine Rolle mehr, ob ein Programm von einem selbst oder von einem anderen Programmierer stammt.'' Ich habe das selbst schon oft am eigenen Leib erlebt: Ich fasse ein altes Programm nach vielen Monaten zum ersten Mal an und denke mir bei einem bestimmten Code-Teil: ``Du liebe Zeit, was habe ich denn da verzapft?'' Natürlich wird der Code sofort verbessert &mdash; und das Programm funktioniert nicht mehr. Und dann beginnt eine mühevolle Zeit des Suchens nach dem Sinn, die meist zu der Erkenntnis führt, dass der ursprüngliche Code doch gut durchdacht war. Und wenn ich schlau bin, nutze ich jetzt endlich die Chance, diese Erkenntnis in Form eines Kommentars zu konservieren, damit sich das Debakel in sechs Monaten nicht wiederholt.

Wichtig beim Kommentieren ist es, nicht zu beschreiben, _was_ man programmiert hat, sondern _warum_ man es genau so programmiert hat. Ersteres hilft kaum weiter, denn um zu erkennen, was hier programmiert wurde, reichen Perl-Kenntnisse. Für das Warum aber muss man den Gedankengang des Entwicklers verstehen -- was dieser durch Kommentare enorm unterstützen kann.

IMPORTANT: Sparen Sie nicht mit Kommentaren, um zu erklären, was Sie sich bei der Programmierung gedacht haben.


=== Erstes Handwerkszeug

Im Rahmen dieses Kurs werden Sie nicht nur viel zu lesen haben, sondern auch Übungsaufgaben bearbeiten, um Ihr neu angeeignetes Wissen in der Praxis anzuwenden. Damit Sie dafür zumindest einen kleinen Grundstock an Werkzeugen kennen, gehe ich in diesem Abschnitt auf grundlegende Perl-Anweisungen ein.


==== Ausgabe von Daten

Um Daten auf den Bildschirm auszugeben, verwendet Perl die Anweisung `print`. Im einfachsten Fall soll ein fester Text ausgegeben werden. Dieser wird einfach in Anführungszeichen hinter die Anweisung geschrieben:

[source,perl]
----
print "Hallo Welt!\n";
----

Die beiden Zeichen `\n` am Ende des Texts bilden ein sogenanntes Escape-Zeichen, das in diesem Fall für das ``Newline'' steht. Es bewirkt, dass die Ausgabe am Beginn der folgenden Zeile fortgesetzt wird. Weitere Escape-Zeichen lernen Sie später in diesem Kurs kennen.



==== Eingabe von Daten

In den Beispielprogrammen der folgenden Kapitel wird häufig die
Eingabe des Benutzers erforderlich sein. Daher sei hier vorgreifend
erklärt, wie Sie eine einfache Benutzereingabe programmieren können.

Eine Eingabe durch den Benutzer kann wie folgt eingelesen werden:

[source,perl]
----
$eingabe = <STDIN>;
----

Der Hintergrund zu dieser Anweisung wird später im Zusammenhang mit
der Verwendung von Variablen sowie der Verarbeitung von Dateien
erläutert. Es sei hier nur so viel gesagt, dass die Eingabe nach
Drücken der Enter-Taste unter dem Namen, der links vom
Gleichheitszeichen steht, abgelegt wird und später wieder abgerufen
werden kann.

Dabei wird allerdings der abschließende Druck der Enter-Taste
ebenfalls, als ``Newline''-Zeichen, mitgespeichert. Weil das
meist unerwünscht ist, kann es so wieder entfernt werden:

[source,perl]
----
chomp $eingabe;
----


==== Beenden eines Perl-Programms

Sobald der Perl-Interpreter die letzte Zeile der Programmdatei
abgearbeitet hat, beendet er die Ausführung des Programms und sich
selbst.

Wenn Sie das Programm aktiv beenden wollen, bietet Perl dazu die Anweisung `exit`. Dieses Kommando beendet die Ausführung des Programms an der Stelle, an der es steht.

Ein Programm kann bei seiner Beendigung einen Zahlenwert an die
aufrufende Software liefern. Dieser Zahlenwert dient meist dazu, einen
Hinweis auf die Situation zu geben, in der das Programm beendet wurde:
erfolgte die Beendigung, weil alles erledigt war oder weil ein fataler
Fehler auftrat? Es ist eine Konvention, dass der Rückgabewert 0 als
``erfolgreich beendet'' zu verstehen ist und jeder andere Wert eine
Fehlersituation repräsentiert. Manche Entwickler definieren nur die 1
als allgemeinen Fehlercode, andere definieren eine ganze Reihe von
Codes, die für verschiedene Fehlerzustände stehen.

`exit` ohne Zusatzangaben liefert immer den Code 0. Ein anderer Exit-Code muss nach der Anweisung angegeben werden:

[source,perl]
----
exit 1;   # Ende mit Exit-Code 1
----

Wird ein Programm wegen eines Fehlers beendet, will man normalerweise vorher einen Hinweis auf diesen Fehler ausgeben. Natürlich können Sie einfach dem `exit`-Kommando ein `print` vorausschicken, aber Perl kennt eine eigene Anweisung, die beides kombiniert: verwenden Sie einfach `die` kombiniert mit einer Fehlermeldung. Der Interpreter wird die Meldung ausgeben und das Programm anschließend mit dem Exit-Code 255 beenden.

[source,perl]
----
die "Programm wird wegen eines Fehlers beendet!\n";
----


=== Gürtelprüfung

<img src="graphics/judogi.jpg" class="beltpic" width="200" />

Hiermit haben Sie die Einführung in die einfachsten Regeln in Perl hinter sich. Um sich den 9. Kyu, den Schülergrad der Einsteiger, zu verdienen, müssen Sie folgende Fragen korrekt beantworten &mdash; und zwar am besten, ohne nachzuschauen. Sollten Sie sich bei der einen oder anderen Frage aber noch unsicher sein, lesen Sie einfach den entsprechenden Abschnitt noch einmal durch.

Noch sieht man Ihnen den Anfängerstatus an, denn Ihr Gürtel wird zunächst weiß sein, aber schon im nächsten Abschnitt winkt der gelbe!


==== Übung

Verständnisfragen:

1. Perl ist eine Interpreter-Sprache. Was bedeutet das?
2. Wie kann ein Perl-Programm gestartet werden?
3. Wo in der Perl-Onlinehilfe finden sich die in der Sprache eingebauten
   Funktionen?
4. Nennen Sie Gründe für die Verwendung von Kommentaren.
5. Womit wird in Perl ein Kommentar eingeleitet? Wie sieht ein Kommentartext aus, der sich über mehrere Zeilen hinweg erstreckt?
6. Was ist die ``Shebang-Zeile'' und wozu wird sie verwendet?
7. Welche Regeln müssen Sie bei der Vergabe von Bezeichnern beachten?
8. Wie können Sie ein Programm regulär beenden? Wie beenden Sie es
   im Fehlerfall?
