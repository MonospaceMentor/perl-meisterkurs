== Kontrollstrukturen [[cha:control]]

[quote, Larry Wall]
____
If I allowed `next $label` then I'd also have to allow `goto $label`, and I don't think you really want that... :-)
____

Der zeilenweise, lineare Ablauf eines Programms kann durch so genannte  indexterm:[Kontrollstrukturen] Kontrollstrukturen verändert werden. In diesem Kapitel lernen Sie, wie Sie bedingte oder wiederholte Codeblöcke einsetzen können, um bestimmte Teile eines Programms nur unter bestimmten Bedingungen oder mehrfach auszuführen.



=== Anweisungen zur bedingten Ausführung

In einem nicht-trivialen Programm muss auf Zustände reagiert werden, die erst zum Programmlauf ermittelt werden können. Will man zum Beispiel den Inhalt einer Datei lesen, dann könnte es sein, dass eine Datei des angegebenen Namens gar nicht existiert. Soll das Programm nicht beim vergeblichen Zugriff an die Wand fahren, muss die Existenz der Datei vorher geklärt werden und darf der Zugriff auf sie nur unter der indexterm:[Bedingung] Bedingung erfolgen, dass sie da ist.

Aus diesem Grund gehören Anweisungen zur bedingten Ausführung zu den wichtigsten Kontrollstrukturen.


==== Bedingte Blöcke 

Im Rahmen der `if` indexterm:[if]  Anweisung werden Programmblöcke nur unter bestimmten Bedingungen ausgeführt:

----
if («Bedingung») {
  «Anweisung(en)»
}
----

In den runden Klammern wird ein logischer Ausdruck indexterm:[Ausruck, Logischer Ausdruck]  erwartet, der als Wahrheitswert interpretiert wird. Es gibt also nur die beiden Alternativen ``wahr'' und ``falsch''. Bei Bedarf finden wie gewohnt passende Typ-Umwandlungen statt (siehe <<sub:logische-werte,Logische Werte>>).

Nur wenn der Wert den Wert ``wahr'' annimmt, werden die im angeschlossenen Block stehenden Anweisungen ausgeführt.

Soll auch reagiert werden, wenn die Bedingung nicht erfüllt ist, wird zusätzlich ein `else`-Block indexterm:[else] angehängt:

----
if («Bedingung») {
  «Anweisung(en)»
}
else {
  «Anweisung(en)»
}
----

Ist die Bedingung ``wahr'', wird der erste Block nach dem `if` ausgeführt, ansonsten der zweite nach `else`.   

Bedingte Blöcke können auch ineinander geschachtelt werden. Hier sei erneut daran erinnert, dass saubere Einrückung von Blöcken den Überblick auch in solchen geschachtelten Strukturen erhalten.

Wenn man aber viele alternative Bedingungen abdecken muss, kommt es schnell zu allzu verschachtelten Konstruktionen:

[source,perl]
----
if ($var == 1) {
    ...
}
else {
    if ($var >= 2 and $var < 10) {
        ...
    }
    else {
        if ($var == 10) {
            ...
        }
        else {
            ...
        }
    }
}
----

Die Schachtelungstiefe bei mehreren alternativen Bedingungen kann durch `elsif` indexterm:[elsif]  minimiert werden. Diese Anweisung vereinigt das `else` mit dem `if`, sodass eine Abfolge der Art ``Wenn... wenn andernfalls... wenn andernfalls...'' entsteht, ohne dass die Schachtelungstiefe steigt. Ein abschließendes `else` kann dann alle bislang nicht geprüften Zustände abfangen.

[source,perl]
----
if ($var == 1) {
    ...
}
elsif ($var >= 2 and $var < 10) {
    ...
}
elsif ($var == 10) {
    ...
}
else {
    ...
}
----


==== Negativ gesehen: unless

Dass Perl-Erfinder Larry Wall Linguist ist, erkennt man an gewissen Eigenheiten seiner Programmiersprache. Zum Beispiel bietet sie zu einem ``Wenn nicht...'' auch ein ``Außer...'' als Alternative zur Formulierung von Bedingungen.

Mit einer gegenüber `if` negierten Bedingung arbeitet nämlich `unless` indexterm:[unless] , der folgende Block wird also ausgeführt, wenn die Bedingung logisch ``falsch'' ist. Wer also nicht mit einer negativen Bedingung arbeiten möchte, kann ihr Gegenteil in einer `unless`-Anweisung einsetzen. Sobald die Bedingung allerdings aus einem komplexeren logischen Ausdruck besteht, wird `unless` schwer verständlich. Spätestens aber von einem `else` Block ist hier strikt abzuraten, denn mehrfache Verneinungen führen keineswegs niemals zu Verwirrung.

IMPORTANT: Verwenden Sie `unless` möglichst sparsam und sehen Sie dann auf jeden Fall von einem `else`-Block ab. 


==== Nachgestellte Bedingungen indexterm:[Bedingung] 

Einzelne Anweisungen können durch ein angefügtes `if` bzw. `unless` bedingt ausgeführt werden:

[source,perl]
----
print "OK" if $test == 1;
----

Diese verkürzte Schreibweise hat allerdings einige Nachteile:

* sie kann nur auf eine Anweisung angewandt werden;
* sie ist verwirrend, weil die Gültigkeit der Anweisung nachträglich
  einschränkt wird, und
* unter Umständen ist die eher beiläufig nachgereichte Bedingung der
  eigentlich wichtige Teil.

Ein Beispiel für den letztgenannten Nachteil: beim Öffnen einer Datei signalisiert die `open`-Anweisung den Erfolg durch einen logischen Wert. Mit nachgestelltem `if` formuliert, gerät das Öffnen jedoch in den Schatten der hoffentlich nie nötigen Fehlermeldung:

[source,perl]
----
print "Fehler!" if open...;
----


==== Der Auswahl-Operator

Durch den bereits im vorigen Kapitel vorgestellten ternären <<sub:auswahloperator,Auswahl-Operator>> footnote:[In einem Magazin fand ich eine lustige alternative Bezeichnung für den Auswahloperator. Betrachten Sie die Symbolfolge `?:` mal von der Seite wie einen Smiley! Ist klar, woher der Name ``Elvis-Operator'' indexterm:[Operator!Elvis-]  kommt? ;-)] indexterm:[Operator,Auswahloperator]  indexterm:[Operator,Ternärer Operator] können Bedingungen auch innerhalb eines Ausdrucks berücksichtigt werden:

----
(«Bedingung») ? «Ausdruck 1» : «Ausdruck 2»
----

Auch hier wird die Bedingung als logischer Ausdruck formuliert, der einen Wahrheitswert liefert. Ist dieser Wert ``wahr'', liefert der Operator den Wert von Ausdruck 1, ansonsten den von Ausdruck 2.

[source,perl]
----
( $a == $b ) ? "gleich" : "ungleich"
----

Da auch gewöhnliche Anweisungen als Ausdrücke eingesetzt werden können, ist der Auswahl-Operator eine Möglichkeit, auf verschiedene Zustände einer Variablen zu reagieren:

[source,perl]
----
($var == 0) ? print "Null"
: ($var == 1) ? print "Eins"
: ($var == 2) ? print "Zwei"
: ($var == 3) ? print "Drei"
: print "Andere Zahl";
----

Von dieser Anwendung des Operators rate ich jedoch ab. Ein Operator soll echte Operanden verknüpfen und aus ihnen einen brauchbaren Wert ermitteln. Das obige Konstrukt tut weder das eine noch das andere. Für den Zweck der Prüfung verschiedener Bedingungen gibt es spezielle Sprachmittel, namentlich die weiter unten beschriebene Switch-Anweisung.

*Übung:* Erstellen Sie ein Programm, das auf eine Eingabe hin prüft, ob eine Zahl größer 0 eingegeben wurde und daraufhin ``Positive Zahl'' oder ``Keine positive Zahl'' ausgibt. Verwenden Sie den Auswahl-Operator.



==== Die Switch-Anweisung

Will man vielen verschiedenen Werten, die eine Variable annehmen kann, jeweils eine spezielle Aktion zuordnen, so führt eine Lösung mit `elsif` zu sehr viel Tipparbeit:

[source,perl]
----
if ($zahl == 1) {
  print "eins\n";
}
elsif ($zahl == 2) {
  print "zwei\n";
}
elsif ($zahl == 3) {
  print "drei\n";
} 
elsif ...
...
} 
else {
  print "Kein passender Wert!\n";
}
----

Seit Perl 5.8 gehört das Switch-Modul indexterm:[Switch] zum Lieferumfang, das es ermöglicht, Bedingungen für verschiedene Werte-Alternativen einer Variablen einfacher zu formulieren:

[source,perl]
----
use Switch;
# ...
switch ($variable) {
  case 1              { print "Zahl 1\n"; }
  case 2              { print "Zahl 2\n"; }
  case [10..20]       { print "Zahl zwischen 10 und 20\n"; }
  case 'Perl'         { print "String: Perl\n"; }
  else                { print "Anderer Wert\n"; }
}
----

An diesem Zusatzmodul haben sich im Laufe der Zeit allerdings einige Schwächen gezeigt, sodass für Perl 6 eine neue Syntax entworfen und bereits in Perl 5.10 fest im Sprachumfang implementiert wurde. Sie verwendet die Schlüsselworte `given` und `when`. Mit `given` wird zunächst ein Ausdruck definiert, der anhand der folgenden nach `when` formulierten Ausdrücke geprüft werden soll. 

Es sind unter anderem folgende Prüfungen möglich:

* `when`-Ausdruck liefert Zahl oder Zeichenkette: Prüfung auf Gleichheit
* `when`-Ausdruck liefert logischen Wert: Prüfung auf ``logisch wahr''. Hier kann die Sondervariable `$\_` als Platzhalter für den `given`-Ausdruck verwendet werden.

Das Schlüsselwort `default` fängt zuletzt alle die Fälle ab, auf die keine der vorher erfolgten Prüfungen passte.

[source,perl]
----
use feature qw(switch);

# ...

given ($zahl) {
	when 0 { print "zahl ist 0"; }
    when ($_ % 2 == 0) { print "zahl ist ungerade\n"; }
	default { print "zahl ist ungerade.\n"}
}
----

NOTE: Weil nachträgliche Spracherweiterungen immer das Risiko mit sich bringen, dass bestehende Programme damit nicht mehr funktionieren (z.B. weil darin der Bezeichner `given` schon anderweitig verwendet wird), müssen sie über das Pragma `use feature` explizit aktiviert werden.


==== Bedingungen als logischer Kurz-Schluss [[sub:logshortcircuit]]

Auch durch logische Ausdrücke kann die bedingte Ausführung einer einzelnen Anweisung erreicht werden. Sie erinnern sich doch noch an den logischen Kurzschluss indexterm:[Logischer Kurzschluss] aus dem vorigen Kapitel? Hierbei wird ein Ausdruck logisch (AND/OR) mit einer Anweisung verknüpft.

Wiederholen wir vorsichtshalber noch einmal. 

Bei Einsatz der AND-Verknüpfung wird die Anweisung nur dann ausgeführt, wenn der logische Ausdruck wahr ist:

----
(«bedingung») && «anweisung»
«bedingung» and «anweisung»
----

Die OR-Verknüpfung erzielt das Gegenteil. Hier wird die Anweisung nur dann ausgeführt, wenn der logische Ausdruck falsch ist:

----
(«bedingung») || «anweisung»
«bedingung» or «anweisung»
----

Dass bei diesen logischen Verknüpfungen die Anweisung nur unter bestimmten Bedingungen ausgeführt wird, liegt an dem von Perl verwendeten Kurz-Schluss-Algorithmus. In bestimmten Situationen lohnt es sich nämlich nicht, bei einer logischen Verknüpfung den zweiten Operanden überhaupt zu betrachten:

* In einer AND-Operation, bei der der linke Operand bereits ``falsch'' ist, muss der rechte Operand (die Anweisung) nicht mehr ausgewertet werden.
* In einer OR-Operation, bei der der linke Operand bereits ``wahr'' ist, muss der rechte Operand (die Anweisung) nicht mehr ausgewertet werden.

Perl erzielt also maximale Effizienz, indem es diejenigen Zweige einer logischen Verknüpfung, die keinen Einfluss auf das Endergebnis mehr haben können, von vornherein ignoriert. Anweisungen in einem solchen Zweig werden also auch nicht ausgeführt.

Weil die Operation immer von links nach rechts ausgewertet wird, erfordern diese Konstrukte also auch zwingend, dass die Bedingung als erster und die Anweisung als zweiter Operand eingesetzt wird.


*Übung:* Schreiben Sie ein Programm `cond-digits.pl` mit folgenden Eigenschaften:

1. Fordern Sie den Benutzer zur Eingabe einer Zahl zwischen 0 und 999
    auf und speichern Sie diese in der Variablen `$zahl`.
2. Geben Sie aus, ob der Wert von `$zahl` ein-, zwei- oder
    dreistellig ist.
3. Trifft keine der drei Alternativen zu, geben Sie eine entsprechende
    Meldung aus.
	

=== Schleifen

So, wie in den meisten Programmen die Ausführung bestimmter Teile an Bedingungen geknüpft ist, werden bestimmte andere wiederholt ausgeführt. Beim Beispiel des Lesens einer Datei müssen eventuell für jede gelesene Zeile die gleichen Anweisungen ausgeführt werden. Wie viele Zeilen im Endeffekt verarbeitet werden müssen, kann bei jedem Programmlauf unterschiedlich sein.

Zu diesem Zweck gibt es das Konzept der indexterm:[Schleife] ``Schleife'': die zu wiederholenden Anweisungen werden zu einem Block zusammengefasst und dieser durch Regeln ergänzt, die bestimmen, wie oft dieser sogenannte indexterm:[Schleifenrumpf] ``Schleifenrumpf'' auszuführen ist.

Für die Definition des Wiederholungsverhaltens gibt es zwei Ansätze:

* Für Schleifen, bei denen schon zu Beginn feststeht, wie viele Wiederholungen durchzuführen sind, ist eine _zählergesteuerte Schleife_ indexterm:[Schleife, Zählergesteuerte Schleife] das richtige Werkzeug.
* Wenn erst während der Ausführung der Schleife bestimmt wird, ob weitere Wiederholungen zu beginnen sind, handelt es um eine _bedingte Schleife_. Hier wird weiter unterschieden, ob es sich um eine _kopfgesteuerte Schleife_ indexterm:[Schleife, Kopfgesteuerte Schleife]  oder um eine _fußgesteuerte Schleife_ indexterm:[Schleife, Fußgesteuerte Schleife] handelt, abhängig davon, ob die Bedingung zu Beginn eines neuen Durchlaufs oder erst nach einem vollendeten Durchlauf geprüft wird.



==== Bedingte Schleifen

Bei bedingten Schleifen indexterm:[Schleife, Bedingte Schleife] hängt die Anzahl der Wiederholungen von einem logischen Ausdruck indexterm:[Ausdruck, Logischer Ausdruck] ab, dessen Wert sich von einem Durchlauf zum anderen ändern kann. Es gibt zwei Arten bedingter Schleifen mit je zwei Vertretern:

* Kopfgesteuerte Schleifen: indexterm:[while] `while`-Schleife, indexterm:[until] `until`-Schleife
* Fußgesteuerte Schleifen: indexterm:[do...while] `do...while`-Schleife, indexterm:[do...until] `do...until`-Schleife

Die jeweilige Variante mit `until` unterscheidet sich von der Schreibweise mit `while` lediglich in dem logischen Wert, der zum Abbruch der Schleife führt: `while`-Schleifen laufen, solange die Bedingung logisch wahr ist; `until`-Schleifen hingegen brechen ab, sobald der Wert des Ausdrucks den Wert ``wahr'' annimmt.

Bei kopfgesteuerten Schleifen indexterm:[Schleife, Kopfgesteuerte Schleife]  wird die Schleifenbedingung zu Beginn jedes Durchlaufs geprüft. Hat die Bedingung schon von vornherein den logischen Wert ``falsch'', wird eine kopfgesteuerte Schleife erst gar nicht ausgeführt.

Anders bei fußgesteuerten Schleifen indexterm:[Schleife, Fußgesteuerte Schleife]: da hier die Bedingung erst nach jedem Abarbeiten des Schleifenrumpfes indexterm:[Schleifenrumpf]  geprüft wird, kommt dieser mindestens einmal zur Ausführung.

Das folgende Beispiel zeigt eine kopfgesteuerte `while`-Schleife:
 
[source,perl]
----
print "Die Fakultaeten kleiner 1000:\n";
my $n = 1;
my $fak = 1;
while ($fak < 1000) {
    $fak *= $n++;  # Fakultaet errechnen und n erhoehen 
    print $fak, "\n";
}
----

Und die folgende `until`-Schleife ist fußgesteuert:
 
[source,perl]
----
my $input;
do {
    print "Sagen Sie 'ja':\n";
    $input = <STDIN>;
    chomp $input;
} until ( $input eq 'ja' );
----

Aus dem letzten Beispiel können Sie auch ersehen, dass Variablen, die in der Fuß-Bedingung geprüft werden sollen, bereits _vor der Schleife_ deklariert werden müssen. Lokale Variablen des Schleifenrumpfs sind in der Schleifenbedingung nicht mehr gültig.


*Übung:* Schreiben Sie ein kleines Programm `kumuliere.pl`, das vom Benutzer eingegebene Zahlen aufaddiert. Bei Eingabe einer Null soll sich das Programm nach Ausgabe der Summe beenden.



==== Zählergesteuerte Schleifen

Zählergesteuerte Schleifen indexterm:[Schleife, Zählergesteuerte Schleife]  kommen immer dann zum Einsatz, wenn die Anzahl der Durchläufe schon zu Beginn der Schleifenbearbeitung feststeht. Wird zum Beispiel für jeden von 8 Schulungsteilnehmern die Eingabe des Namens gefordert, wird eine sinnvolle Schleifenkonstruktion einen Zähler verwenden, der nacheinander 8 Werte annimmt -- am einfachsten die Zahlen von 1 bis 8.

Anders stünde es um eine Schleife, die einzelne Eingaben noch auf Plausibilität prüft, zum Beispiel auf Eingabe von Vor- und Nachnamen. Hierbei ist unklar, wie viele Wiederholungen nötig sind, bis der Benutzer das erwartungsgemäß hinbekommt, und daher eine bedingte Schleife die richtige.

Die klassische Zählerschleife ist die indexterm:[for] `for`-Schleife. In der traditionellen C-Schreibweise besteht der Kopf dieser Schleife aus 3 Teilen:

1. Eine Anweisung, die einmalig zu Beginn der Schleife ausgeführt wird. Sie dient der Initialisierung des Schleifenzählers. Hier wird also der Startwert des Zählers definiert.
2. Eine Bedingung, die vor jedem Durchlauf geprüft wird. Solange dieser indexterm:[Ausdruck, Logischer Ausdruck] logische Ausdruck ``wahr'' ist, wird der Schleifenrumpf ausgeführt.
3. Eine Anweisung, die nach jedem Schleifendurchlauf ausgeführt wird. Hier wird der Zähler hoch oder herunter gezählt.

Ein einfaches Beispiel:

[source,perl]
----
for ($i = 0; $i < 10; $i++) {
  print "Die Quadratzahl von $i ist ", $i*$i, "\n";
}
----

Genau betrachtet müssen die 3 Teile nichts miteinander zu tun haben -- einen einfachen Schleifenrumpf könnte man sogar direkt im dritten Teil unterbringen. Es gilt aber als schlechter Stil, den Schleifenkopf für andere Zwecke zu nutzen als oben beschrieben.

Eine weitere Art zählergesteuerter Schleifen, die indexterm:[foreach] `foreach`-Schleife, wird in vielen Programmiersprachen schmerzlich vermisst. Sie werden wir im Zusammenhang mit Listen und Arrays genauer betrachten.


*Übung:* Erstellen Sie ein Perl-Programm `loop-add.pl`, das alle Zahlen von 1 bis zu einem über die Tastatur einzugebenden Wert addiert.

1. Verwenden Sie eine zählergesteuerte Schleife, um die Zahlen zu
  addieren. Speichern Sie die Summe in einer eigenen Variablen.
2. Geben Sie den eingegebenen Endwert sowie das Ergebnis auf dem
  Bildschirm aus.


  
==== Einzeilige Schleifen

Einzelne Anweisungen können durch ein angefügtes indexterm:[while] `while` bzw. indexterm:[until] `until` wiederholt ausgeführt werden:

[source,perl]
----
print $a++, "\n" while $a < 10;
----

Wie die einzeiligen Bedingungen sind auch die einzeiligen Schleifen elegant, haben aber nur eingeschränkten Nutzen.



==== Verschachtelte Schleifen

Schleifen können auch ineinander geschachtelt werden. Eine eingeschachtelte Schleife wird für jede Wiederholung der eine Ebene weiter außen liegenden Schleife einmal komplett durchlaufen.

Nehmen wir als Beispiel zwei geschachtelte Schleifen: Wird die äußere zehnmal und die innere siebenmal durchlaufen, kommen die Anweisungen im inneren Schleifenrumpf siebzigmal zur Ausführung.

*Übung:* Schreiben Sie ein Programm, das das Einmaleins der Zahlen von 0 bis 9 auf dem Bildschirm ausgibt. Die Schönheit der Darstellung sei dabei noch zweitrangig; Hilfsmittel für ein sauberes Ausgabeformat lernen Sie später noch kennen.
	

=== Anweisungen zur Schleifensteuerung

Mit den zuvor beschriebenen Schleifen haben wir alle Werkzeuge, die wir brauchen, um Programmteile wiederholt auszuführen. Zählerschleifen werden eingesetzt, wenn die Anzahl der Ausführungen von Anfang an feststeht, ansonsten sind bedingte Schleifen das passendere Konstrukt.

Aber wie werden Sie sich entscheiden, wenn Sie eine Schleife haben, deren Anzahl Ausführungen _fast sicher_ feststeht, die aber unter bestimmten Umständen schon vorher beendet werden muss? Oder wenn ein Schleifendurchlauf in bestimmten Situationen nicht komplett durchgeführt werden darf, sondern die Ausführung mittendrin gleich zum nächsten Durchlauf springen soll?

Puristen werden sagen: ``Nun, dann ist es eben keine Zählerschleife, sondern eine bedingte Schleife! Ende der Diskussion.'' Und dann werden sie eine bedingte Schleife mit einem selbstverwalteten Zähler bauen und den etwas unsicheren Teil des Schleifenrumpfs mit einem `if` umschließen.

Für weniger streng veranlagte Programmierer bietet Perl allerdings Vereinfachungen. Zum Beispiel ermöglicht es die Anweisung indexterm:[last] `last`, eine zähler- oder kopfgesteuerte Schleife sofort zu beenden, ohne dass sich der Wert der Schleifenbedingung verändert oder der Zähler den Endwert erreicht haben muss. Durch `last` wird der Programmablauf sofort hinter dem Schleifenrumpf fortgesetzt. In diesem Zusammenhang erweisen sich nachgestellte Bedingungen übrigens ausnahmsweise als praktisch.

[source,perl]
----
while (1 == 1) { # Endlosschleife
    print "Ihre Eingabe: ";
    my $eingabe = <>;
    chomp $eingabe;
    
    last if $eingabe eq 'ENDE';  # Abbruch
}
----

Soll nur der aktuelle Schleifendurchlauf abgebrochen, die Schleife aber fortgesetzt werden, kommt entweder die Anweisung indexterm:[redo] `redo` oder die Anweisung indexterm:[next] `next` zum Einsatz. Beide springen zurück zum Beginn des Schleifenrumpfs. Der Unterschied zwischen beiden liegt im Verhalten bei Zählerschleifen: `next` beginnt sofort den nächsten regulären Schleifendurchlauf mit neuem Zählerstand (sofern die Schleife damit nicht zu Ende ist), während `redo` den Schleifenzähler unverändert lässt. Bei kopfgesteuerten bedingten Schleifen gibt es keinen Unterschied zwischen beiden Anweisungen und auf fußgesteuerte bedingte Schleifen sind sie gar nicht anwendbar.

Mit Hilfe so genannter indexterm:[Label] ``Labels'' ist es auch möglich, sich innerhalb von geschachtelten Schleifen auf eine weiter außen liegende Schleife zu beziehen. Dazu wird hinter `last`, `next` oder `redo` ein eindeutiges Etikett angegeben, das dem jeweiligen Schleifenkopf mitsamt eines Doppelpunkts vorangestellt wird:

[source,perl]
----
SCHLEIFE:
while (1 == 1) { # Endlosschleife
    ...
    last SCHLEIFE if ...
}
----

Die Verwendung von `next`, `redo` und `last` sind eine Stilfrage: Bei einem kritischem Blick stellt sich heraus, dass sie keine notwendigen Befehle sind. Wenn man die Bedingung, an die sie jeweils geknüpft sind, in die Schleifenbedingung integriert und die ihnen folgenden Anweisungen in einen zusätzlichen bedingten Block einschließt, erzielt man den gleichen Effekt, erhält aber klareren Code. Puristisch betrachtet haben in Zählerschleifen diese Anweisungen, insbesondere aber das speziell für sie gedachte `redo`, nichts zu suchen, weil sie der Prämisse ``Bei Zählerschleifen steht die Anzahl der Durchläufe von vornherein fest'' zuwiderlaufen.



=== Gürtelprüfung

image:image/judogi.jpg[width=200]

Ein weiterer Lernabschnitt ist zu Ende, und wieder stehen letzte Fragen und Übungsaufgaben an, nach deren erfolgreicher Bearbeitung Sie in den nächsten Grad aufsteigen. Dieses Mal ist es der 7. Kyu, symbolisiert durch den orangefarbenen Gürtel.

 
==== Übung

Verständnisfragen:

1. Welche Alternativen gibt es zur `if`-Anweisung, um Anweisungen bedingt auszuführen?
2. Was ist der Unterschied zwischen einer `else`-Anweisung, der direkt ein `if` folgt, und der `elsif`-Anweisung?
3. Erläutern Sie, worin sich die `while`- von der
    `until`-Schleife unterscheidet.
4. Erklären Sie den Ablauf einer kopf- bzw. einer fußgesteuerten
    Schleife.
5. Aus welchen Teilen besteht der Kopf der `for`-Schleife?
6. Mit welcher Anweisung können Sie eine Schleife verlassen, ohne deren
    Abbruchbedingung auszuwerten?


==== Übung

Erstellen Sie ein Perl-Programm `cond-points.pl`, das aus einer eingegebenen Punktezahl eine Schulnote ermittelt. Verwenden Sie dabei folgende Aufstellung:

[width="50%",options="header"]
|================
| Punkte | Note
| 100-91 | 1
| 90-76 | 2
| 75-61 | 3
| 60-46 | 4
| 45-31 | 5
| 30-0 | 6
|================

1. Prüfen Sie die eingegebene Punktezahl mit Alternativ-Bedingungen und geben Sie die zugeordnete Note aus.
2. Fügen Sie eine zusätzliche Prüfung ein, damit keine Punktezahlen größer als 100 eingegeben werden können. Geben Sie in diesem Fall eine Meldung aus.
3. Die Auswertung einer Punktezahl soll mehrfach ausgeführt werden können. Zeigen Sie dazu zum Schluss die Aufforderung an, sich mit der Eingabe von ``j'' oder ``n'' für oder gegen einen erneuten Durchlauf zu entscheiden.
4. Verwenden Sie eine geeignete Schleife, um die Auswertung mindestens einmal und so lange auszuführen, bis die Frage zur Wiederholung verneint wird.
