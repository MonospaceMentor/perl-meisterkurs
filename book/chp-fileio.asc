== Datei- und Verzeichnisfunktionen [[cha:fileio]]

[quote, Larry Wall]
____
Just don't create a file called -rf. :-)
____


<p>Dieses Kapitel beschäftigt sich ausführlich mit dem Erzeugen und Verarbeiten von in Dateien gespeicherten Daten &mdash; einem der wichtigsten Anwendungsgebiete für Perl-Programme.</p>


<h2 id="sec:fileopen">Öffnen und Schließen von Dateien</h2>

<p>Am besten kann Perl mit reinen Textdateien umgehen, aber auch Binärdaten können Sie in Perl aus Dateien lesen und in Dateien schreiben.</p>

<p>Grundsätzlich gilt: wenn Sie auf die Inhalte einer Datei zugreifen wollen, benötigen Sie ein so genanntes <q><a name="idx:Dateihandle">Dateihandle</a></q>. Ein Dateihandle kann man sich als den Schlauch vorstellen, der zu einem bestimmten Datenbehälter führt und aus dem ein Programm Daten <q>saugen</q> oder in das ein Programm Daten <q>hineinschütten</q> kann.</p>

<p>In diesem Bild gibt es dann auch einen Hahn am Ende des Schlauchs, den wir zu Beginn erst einmal öffnen müssen. Und der Ordnung halber sollte man nach getaner Arbeit diesen Hahn auch <a class="footnote">wieder schließen<span>Im Zweifelsfall erledigt das spätestens am Programmende der Perl-Interpreter selbst &mdash; aber wer möchte schon, dass andere hinter einem aufräumen müssen?</span></a>.</p>

<p>Deshalb ist der erste Schritt beim Verarbeiten von Dateien stets die Anwendung der Funktion <span class="literal">open</span><a name="idx:open"></a>. Sie erledigt alles, was zum Öffnen der betreffenden Datei notwendig ist, und liefert dem Programm das benötigte Dateihandle.</p>

<p>Dieses kann in Perl zwei Ausprägungen haben. In alten Perl-Versionen wurde ein Dateihandle in Form eines <q><a name="idx:Bareword">Bareword</a></q>, also eines Bezeichners ohne Sigil, angegeben. Diese als <q><a name="idx:Typeglob">Typeglob</a></q> bezeichnete Form des Dateihandles ist jedoch immer global und daher aus dem gleichen Grund verpönt wie globale Variablen. Daher können in aktuellen Perl-Versionen auch normale skalare Variablen als Dateihandle verwendet werden. Wie bei jeder skalaren Variablen dürfen &mdash; ja, sollen &mdash; diese Dateihandles lexikalisch, also lokal, sein.</p>

<p>Als Argument neben dem Dateihandle benötigt <span class="literal">open</span> noch eine Zeichenkette mit dem Namen der gewünschten Datei, gegenenfalls inklusive vorangestelltem Verzeichnispfad. Vor dieser Dateiangabe kann durch ein weiteres Zeichen der <a name="idx:Zugriffsmodus">Zugriffsmodus</a> definiert werden. Ein Kleiner-als-Zeichen <q>&lt;</q> signalisiert Perl, dass die Datei zum Lesen geöffnet werden soll. Bei einem Größer-als-Zeichen <q>&gt;</q> wird die Datei zum Schreiben geöffnet und gleich zu Beginn geleert. Eine bereits existierende Datei wird also faktisch überschrieben, ansonsten wird die Datei neu angelegt. Dieses Überschreiben kann durch Verdoppelung des Zeichens zu <q>&gt;&gt;</q> verhindert werden. In diesem Fall werden neue Ausgaben hinter dem bisherigen Dateiende angehängt.</p>

<p>Wer sich nicht für nur eine der Varianten Lesen und Schreiben festlegen kann, setzt vor das Modus-Zeichen noch ein Pluszeichen. Dabei ist <q>+&lt;</q> meist die geschicktere Alternative, weil auch <q>+&gt;</q> den Dateiinhalt beim Öffnen vernichtet.</p>

<p>Wird <span class="literal">open</span> in seiner Variante mit zwei Argumenten aufgerufen, nämlich Handle und Dateiname, kann das Modus-Kennzeichen einfach als erstes Zeichen des Namens-Strings eingebaut werden:</p>

<pre><code class="example">open $text_handle, '>test.txt';</code></pre> 

<p>Sicherer ist aber die Variante mit 3 Argumenten, bei der das Lese-/Schreib-Zeichen abgetrennt ist:</p>

<pre><code class="example">open $text_handle, '>', 'test.txt'</code></pre> 

<p>Dies schützt uns in Ausnahmefällen vor unerwarteten Ergebnissen:</p>

<pre><code class="example"># ungewohnlicher, aber valider Dateiname
my $file_name = '>test.txt';
# Wider Erwarten wird zum Anhaengen geoeffnet!
open $text_handle, ">$file_name";</code></pre> 

<p>Der Rückgabewert der <span class="literal">open</span>-Funktion signalisiert als Wahrheitswert den Erfolg oder Misserfolg der Aktion. Diesen kann man entweder in einer <span class="literal">if</span>-Abfrage prüfen oder sich den logischen Kurzschluss aus Abschnitt <a href="#sub:logshortcircuit" class="chapterref"></a> zunutze machen, wie die folgenden Beispiele zeigen.</p>

<pre><code class="example"># Oeffnen zum Lesen
my $result = open $datei_handle, '&lt;', 'test.txt';
if (! $result) {
	die "Fehler beim Oeffnen: $!\n";
}

# Oeffnen zum (Ueber-) Schreiben
open $datei_handle, '&gt;', 'test.txt'
	or die "Fehler beim Oeffnen: $!\n";

# Oeffnen zum Anhaengen
open $datei_handle, '&gt;&gt;', 'test.txt'
	or die "Fehler beim Oeffnen: $!\n";</code></pre>

<p>Bei der Ausgabe der Fehlermeldung wird auch die Meldung des Betriebssystems weitergegeben, die der Spezialvariablen <span class="literal">$!</span> entnommen wird.</p>

<p>Nach einem erfolgreichen <span class="literal">open</span> kann das Programm mit dem Dateihandle dann alle Dinge anstellen, für die es die Datei geöffnet hat, und damit werden wir uns in den folgenden Abschnitten beschäftigen.</p>

<p>Der Ordnung halber sei aber zuvor gleich an dieser Stelle geklärt, wie die Arbeit mit jeder Datei abzuschließen ist. Es gilt: alle Dateien, die ein Programm öffnet, hat es auch wieder zu schließen. Dazu dient die <span class="literal">close</span>-Funktion<a name="idx:close"></a>, die als Argument das betreffende Dateihandle erwartet.</p>

<pre><code class="example">close($datei);</code></pre>

<div class="important">

<p>Jede Datei, die geöffnet wird, sollte auch möglichst bald wieder geschlossen werden. Ansonsten ist &mdash; zumindest bei schreibendem Zugriff &mdash; der Verlust von Daten möglich.</p>

</div>



<h3>Standard-Dateihandles</h3>

<p>Beim Start jedes Perl-Programms werden bereits automatisch drei Dateihandles erzeugt:<a name="idx:Dateihandle!Standard-"></a></p>

<ul>
<li> <span class="literal">STDIN</span>: Standard-Eingabe-Kanal</li>
<li> <span class="literal">STDOUT</span>: Standard-Ausgabe-Kanal</li>
<li> <span class="literal">STDERR</span>: Standard-Fehler-Kanal</li>
</ul>

<p>So automatisch, wie sie erzeugt wurden, werden sie zum Programmende auch wieder geschlossen &mdash; auch darum müssen Sie sich ausnahmsweise nicht kümmern.</p>

<p><span class="literal">STDIN</span> ist das Handle für den Standard-Eingabe-Kanal, der standardmäßig mit dem das Programm aufrufenden Terminal verbunden ist. Es ist möglich, beim Aufruf des Programms <span class="literal">STDIN</span> mit einer Datei zu verbinden. Dazu wird in der Linux-Shell dem Programmaufruf ein kleiner-als-Zeichen und der Name der gewünschten Datei angefügt:</p>

<div class="shell">programm.pl &lt;input.txt</div>

<p>Liest das Programm nun aus dem Handle <span class="literal">STDIN</span>, liest es Daten aus der verbundenen Datei. Wurde auf die Eingabeumleitung verzichtet, erwartet das Programm eine durch die Enter-Taste abgeschlossene Eingabe durch den Benutzer. Das ist nun auch endlich die Erklärung für das Konstrukt, das wir seit Abschnitt <a href="#sect:simpleinput" class="chapterref"></a> einsetzen!</p>

<p>Umgekehrt schreibt jedes Perl-Programm seine Ausgaben standardmäßig in das Dateihandle <span class="literal">STDOUT</span>, das standardmäßig mit dem aufrufenden Terminal verbunden ist, aber ebenfalls durch Mittel der aufrufenden Shell mit einer Datei verknüpft werden kann. Folgt dem Programmaufruf ein größer-als-Zeichen mit einem Dateinamen, wird die Ausgabe in diese Datei geschrieben, nachdem die Datei neu angelegt wurde. Wenn Ihnen inzwischen die Ähnlichkeit mit dem Zugriffsmodus bei <span class="literal">open</span> aufgefallen ist, wird es Sie nicht mehr überraschen, dass Sie den Standard-Ausgabe-Kanal mit <span class="literal">&gt;&gt;</span> auch so umleiten können, dass die Ausgaben des Programms an den bestehenden Inhalt einer Datei angehängt werden, anstatt sie zu überschreiben.</p>

<div class="shell">programm.pl &gt;output.txt</div>

<p>Es gibt noch einen zweiten Ausgabekanal, den Sie nicht eigens öffnen müssen. Dieser Kanal, <span class="literal">STDERR</span>, dient dazu, produktive Ausgaben von Fehlermeldungen trennen zu können. Die Anweisung <span class="literal">die</span> schickt ihre Meldung selbständig an das <span class="literal">STDERR</span>-Handle. Auch diesen Kanal können Sie beim Programmaufruf umleiten, indem Sie <span class="literal">2></span> bzw. <span class="literal">2>></span> verwenden.</p>

<div class="shell">programm.pl 2&gt;error.txt</div>

<div class="shell">programm.pl &gt;output.txt 2&gt;error.txt</div>

<div class="important">
    <p>Mit den Standard-Dateihandles kann ein Perl-Programm auf Dateien
    zugreifen, deren Namen es gar nicht kennt. Diese werden erst beim Aufruf
    des Programms in der Shell festgelegt.</p>
</div>





<h2>Textdateien lesen</h2>

<p>Perl hat seine Stärken in der Verarbeitung von Textdaten. Deshalb wird man in den meisten Fällen auch auf Textdateien zugreifen. (Sie werden später aber auch lernen, wie mit Perl Binärdateien bearbeitet werden können.)</p>

<p>Das Lesen aus einer Textdatei erfolgt mit Hilfe eines unären Operators, der eine ungewöhnliche Schreibweise hat: sein Operand, das Dateihandle, wird nämlich zwischen ein <q>kleiner-als</q>- und ein <q>größer-als</q>-Zeichen eingebettet. Dieser Operator liest Daten zeilenweise aus dem angegebenen Dateihandle, weshalb er <q>readline-Operator</q><a name="idx:Operator!Readline-"></a> heißt. Als Ausdruck hängt der Wert des readline-Operators vom Kontext ab: in skalarem Kontext liefert er die nächste Zeile als Zeichenkette, im Listen-Kontext sogar eine ganze Liste von Zeichenketten mit den restlichen Zeilen in der Datei.</p>

<p>Das Zeilenende wird in Textdateien durch ein oder mehrere Sonderzeichen signalisiert. Bei Microsoft-Betriebssystemen steht das Paar aus <q>Carriage Return</q> (ASCII-Code 13) und <q>Line feed</q> (ASCII-Code 10) für das Zeilenende, Linux und Co. sparen sich das <q>Line feed</q> und beschränken sich auf ein <q>Carriage Return</q>. Diese Zeilenende-Zeichen sind in der Zeichenkette, die der readline-Operator liefert, ebenfalls enthalten. Die Funktion <span class="literal">chomp</span><a name="idx:chomp"></a> entfernt diese Zeichen. Die Spezialvariable <span class="literal">\$/</span>, in der der Interpreter beim Programmstart die geltenden Zeilenend-Zeichen speichert, sagt sowohl dem readline-Operator, wo eine Zeile endet, als auch der <span class="literal">chomp</span>-Funktion, welche Zeichen sie entfernen soll, wenn sie am Ende einer Zeichenkette stehen. Ihr Inhalt ist also von Betriebssystem zu Betriebssystem unterschiedlich.</p>

<p>Tritt ein Fehler auf oder wurde das Ende der Datei erreicht, ergibt der readline-Operator keine Zeichenkette mehr, sondern <span class="literal">undef</span>. Während bekanntlich beliebige nicht-leere Zeichenketten logisch als <q>wahr</q>, <span class="literal">undef</span> jedoch als <q>falsch</q> interpretiert werden, kann man das Ergebnis des readline-Operators in einer bedingten Schleife verwenden, die Zeile für Zeile in eine Variable liest und verarbeitet.</p>

<pre><code class="example"># zeilenweise
while ($zeile = &lt;$datei&gt;) {
	print 'Zeile: ', $zeile;
}

# auf einmal
my @inhalt = &lt;$datei&gt;;</code></pre>

<p>Eine kleine Fangfrage: warum müssen wir nicht befürchten, dass eine Leerzeile in der Datei zum Abbruch der Schleife führt &mdash; obwohl wir schon in Kapitel <a href="#sub:logische_werte" class="chapterref"></a> gelernt haben, dass der Leerstring als <q>falsch</q> interpretiert wird? (Ich bin sicher, Sie kommen drauf, deshalb lasse ich die Frage unbeantwortet.)</p>

<p>Erfolgt die Verwendung des readline-Operators ohne eine Zuweisung, wird eine Zeile der Datei gelesen und in der Spezialvariablen <span class="literal">$_</span> gespeichert.</p>

<pre><code class="example">while (&lt;$datei>) {
	print 'Zeile: ', $_, "\n";
}</code></pre>

<p>Eine besondere Anwendungsform des readline-Operators ist es, ihn ohne Handle anzugeben (<span class="literal">&lt;&gt;)</span>. Weil dies wie ein stilisiertes Karo auf Spielkarten aussieht und das Karo im Englischen <q>diamond</q> heisst, bezeichnet man diese Form des Operators auch als Diamant-Operator<a name="idx:Operator!Diamant-"></a>. Mit dem Diamant-Operator liest das Programm automatisch die Dateien, deren Namen beim Aufruf des Programms als Argumente angegeben wurden, der Reihe nach. Wurden beim Programmstart gar keine Dateien angegeben, greift Perl auf das Dateihandle <span class="literal">STDIN</span> zurück. Dieses Verhalten entspricht dem gängiger Linux-Werkzeuge wie <span class="command">cat</span> oder <span class="command">grep</span>. Das <span class="command">cat</span>-Kommando lässt sich in Perl somit ganz einfach nachprogrammieren:</p>

<pre><code class="example">#!/usr/bin/perl
while (&lt;&gt;) {
	print;
}</code></pre>

<div class="shell">perl cat.pl datei1.txt datei2.txt</div>

<p>Exakt dieses Konstrukt um das auszuführende Programm impliziert die Perl-Kommandozeilenoption <span class="literal">-p</span>. Das eigentliche Programm wird dabei innerhalb des Schleifenrumpfs vor der <span class="literal">print</span>-Anweisung eingefügt.</p>

<p>Damit geht <span class="command">cat</span> dann noch um einiges kürzer. :-)</p>

<div class="shell">perl -pe '{}' datei.txt datei2.txt</div>




<h3>Dateien einsaugen</h3>

<p>Im Listenkontext liest der Diamant-Operator <em>alle Zeilen</em> des Dateihandles und erzeugt daraus eine Liste:</p>

<pre><code class="example">open $text_handle, '&lt;', "text.txt"
  or die "Fehler beim Oeffnen: $!\n";
@datei = &lt;$text_handle&gt;;
close $text_handle;</code></pre>

<p>Dieses <q>Einsaugen</q> (engl. <q>slurp</q>) kann man auch mit einer skalaren Variablen erzielen, indem man dafür sorgt, dass Perl keine Zeilenenden mehr erkennt. Für das Programm besteht die Datei dann aus einer einzigen, langen Zeile, die bereits beim ersten Einsatz des Diamant-Operators eingelesen wird.</p>

<p>Welche Zeichen ein Zeilenende markieren, ist vom Betriebssystem abhängig und deshalb nicht hart in den Interpreter codiert, sondern in der Variablen <span class="literal">\$/</span> definiert. Ändert man diese Variable auf <span class="literal">undef</span>, findet Perl kein Zeilenende mehr und muss bis zum Dateiende lesen:</p>

<pre><code class="example">open $text_handle, '&lt;', "text.txt"
    or die "Fehler beim Oeffnen: $!\n";
$/ = undef;
$text = &lt;$text_handle&gt;;
close $text_handle;</code></pre>

<p>Damit später im Programm das zeilenweise Lesen wieder funktioniert, sollte man den ursprünglichen Wert von <span class="literal">$/</span> wiederherstellen. Am einfachsten nutzt man dazu <span class="literal">local</span> in einem <a class="footnote">Anweisungsblock<span>Dies ist offen gesagt die einzige mir bekannte Situation, in der <span class="literal">local</span> sinnvoll eingesetzt werden kann.</span></a>:</p>

<pre><code class="example">open $text_handle, '&lt;', "text.txt"
    or die "Fehler beim Oeffnen: $!\n";
do {
	local $/;
	$text = &lt;$text_handle&gt;;
}
close $text_handle;</code></pre>

<div class="important">

<p>Das Einsaugen einer Datei erleichtert zwar die Verarbeitung ihres Inhalts, kann aber bei großen Dateien zu enormem Hauptspeicherbedarf führen. Es ist daher sinnvoll, vor dem Einlesen der Datei ihre Größe zu prüfen.</p>

</div>




<h2>In Dateien schreiben</h2>

<p>Um Daten in eine Datei zu schreiben, bedienen wir uns einer Anweisung, die wir bereits intensiv einsetzen: die <span class="literal">print</span>-Anweisung<a name="idx:print"></a>. <span class="literal">print</span> schreibt standardmäßig in das Dateihandle <span class="literal">STDOUT</span>, weshalb bisher die Ausgaben unserer Programme auf dem Bildschirm angezeigt wurden.</p>

<p>Das Ausgabe-Dateihandle kann aber ganz einfach dadurch geändert werden, dass wir es der Argumentsliste der <span class="literal">print</span>-Anweisung voranstellen. Wichtig ist, dass es keineswegs Bestandteil dieser Liste auszugebener Daten ist und daher nicht mit einem Komma von den folgenden Argumenten abgetrennt wird, sondern mit einem Leerzeichen.</p>

<div class="important">
    <p>Setzen Sie bei der Ausgabe mit <span class="literal">print</span> das Dateihandle am besten in geschweifte Klammern, um zu verhindern, dass es versehentlich in die Liste der Ausgabe-Argumente rutscht.</p>
</div>

<pre><code class="example">print {$ausgabe} "Wert: ", $var, "\n";</code></pre>

<div class="exercise">
<h4>Übung</h4>
<p>Schreiben Sie ein Perl-Programm, das eine Textdatei <span class="filename">original.txt</span>
zeileweise in die Datei <span class="filename">kopie.txt</span> kopiert.</p>
</div>





<h2>Sperren</h2>

<p>Um beim Schreiben von Dateien Konflikte mit anderen Prozessen zu vermeiden, kann die Datei durch <span class="literal">flock</span><a name="idx:flock"></a> gesperrt werden<a name="idx:Datei!sperren"></a>.</p>

<p>Während einer exklusiven Sperre (engl. <q>exclusive lock</q>) darf kein anderer Prozess lesend oder schreibend auf die Datei zugreifen. So wird verhindert, dass das Lesen einer Datei, in die gerade geschrieben wird, inkonsistente Daten liefert.</p>

<p>Sollen lediglich konkurrierende Schreibzugriffe vermieden werden, gleichzeitige Lesezugriffe aber erlaubt sein, genügt ein <q>shared lock</q>.</p>

<p>Die Auswahl der Sperre erfolgt am besten durch die Angabe vordefinierter Konstanten aus dem Modul <span class="literal">Fcntl</span> (<q>file control</q>).</p> 

<pre><code class="example">use Fcntl ':flock';
...
open $ausgabe, '>', 'test.txt'
  or die "Fehler beim Oeffnen: $!\n";
flock $ausgabe, LOCK_EX;  # exklusive Sperre
...
close $ausgabe;</code></pre>

<p>Ist eine Sperre nicht sofort möglich, weil bereits ein anderes Programm seinerseits die Datei gesperrt hat, wartet <span class="literal">flock</span> so lange, bis diese wieder aufgehoben wird.</p>

<p>Eine durch <span class="literal">flock</span> verhängte Sperre wird durch das Schließen der Datei mit <span class="literal">close</span> wieder aufgehoben.</p>

  


<h2>Statusinformationen über Dateien</h2>

<p>Abseits vom Öffnen, Verarbeiten und Schließen interessieren wir uns oft auch für bestimmte Eigenschaften von Dateien. Zum Beispiel sollten wir uns vor dem Einsaugen einer Datei erst vergewissern, dass wir ihre Größe auch handhaben können. Und wer vorausschauend programmieren will, muss vor dem Beschreiben einer Datei erst einmal prüfen, ob er dazu überhaupt berechtigt ist.</p>

<p>Perl kennt spezielle unäre Dateistatus-Operatoren<a name="idx:Operator!Dateistatus-"></a>, die Detailinformationen über Dateien liefern. Sie werden dem betreffenden Dateinamen vorangestellt und bestehen immer aus einem Bindestrich und einem Buchstaben.</p>

<p>In den meisten Fällen ergeben Ausdrücke mit diesen Operatoren einen Wahrheitswert.</p>

<table>
	<thead>
		<tr>
			<th>Operator</th>
			<th>Bedeutung</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><span class="literal">-e</span></td>
			<td>Datei existiert</td>
		</tr>
		<tr>
			<td><span class="literal">-z</span></td>
			<td>Datei ist leer (<q>zero size</q>)</td>
		</tr>
		<tr>
			<td><span class="literal">-s</span></td>
			<td>liefert die Dateigröße in Bytes</td>
		</tr>
		<tr>
			<td><span class="literal">-f</span></td>
			<td>Datei ist eine normale Datei</td>
		</tr>
		<tr>
			<td><span class="literal">-d</span></td>
			<td>Datei ist ein Verzeichnis</td>
		</tr>
		<tr>
			<td><span class="literal">-l</span></td>
			<td>Datei ist ein symbolischer Link</td>
		</tr>
		<tr>
			<td><span class="literal">-r</span></td>
			<td>Datei ist für den <a class="footnote">effektiven Benutzer<span>Der <q>effektive Benutzer</q> ist in diesem Zusammenhang der, mit dessen Rechten das Programm ausgeführt wird.</span></a> lesbar.</td>
		</tr>
		<tr>
			<td><span class="literal">-x</span></td>
			<td>Datei ist für den effektiven Benutzer ausführbar</td>
		</tr>
		<tr>
			<td><span class="literal">-o</span></td>
			<td>Datei gehört dem effektiven Benutzer</td>
		</tr>
	</tbody>
</table>

<p>Beachten Sie, dass die Status-Operatoren kein Dateihandle erfordern, sondern einfach den Dateinamen als Operand erwarten:</p>

<pre><code class="example">my $file_size = -s 'report.txt';</code></pre>




<h2>Dateien zeichenweise bearbeiten</h2>

<p>Bei Textdateien ist die zeilenweise Verarbeitung sinnvoll. Dabei übernimmt Perl selbständig das Erkennen von Zeilenenden, deren Kennzeichnung vom Betriebssystem abhängt.</p> 

<p>Hat man es aber mit Binärdaten wie zum Beispiel einer Grafikdatei zu tun, gibt es keine Zeilen mehr. Solche Dateien wird man entweder Byte für Byte verarbeiten oder in beliebig großen Blöcken. Statt von Bytes ist in diesem Abschnitt von <q>Zeichen</q> die Rede<a class="footnote">.<span class="fntext">In der Regel sind beide Begriffe als gleichbedeutend zu betrachten; in Sonderfällen, die hier nicht genauer beleuchtet werden sollen, kann es sich aber auch um aus mehreren Bytes bestehende UTF-8-Zeichen handeln.</span></a></p>

<p>Diese Art der Ein- und Ausgabe wird als <q>Character I/O</q> bezeichnet. Sie erlaubt es zusätzlich, durch Versetzen eines <q>Dateizeigers</q> an eine beliebige Stelle der Datei zu springen, um dort zu lesen oder zu schreiben.</p> 

<p>Um derart auf beliebige Teile einer Datei zuzugreifen und sie zeichenweise zu bearbeiten, stehen in Perl folgende Funktionen zur Verfügung:</p>

<table>
	<thead>
		<tr>
			<th>Funktion</th>
			<th>Verwendung</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><span class="literal">getc</span></td>
			<td>liest ein einzelnes Zeichen</td>
		</tr>
		<tr>
			<td><span class="literal">read</span></td>
			<td>liest eine Anzahl Zeichen</td>
		</tr>
		<tr>
			<td><span class="literal">tell</span></td>
			<td>liefert die Position des Dateizeigers</td>
		</tr>
		<tr>
			<td><span class="literal">seek</span></td>
			<td>positioniert den Dateizeiger</td>
		</tr>
		<tr>
			<td><span class="literal">binmode</span></td>
			<td>schaltet zwischen Binär- und Textmodus um</td>
		</tr>
		<tr>
			<td><span class="literal">eof</span></td>
			<td>prüft auf Dateiende</td>
		</tr>
	</tbody>
</table>

<p>Die Datei muss zunächst wie gewohnt mit <span class="literal">open</span> geöffnet worden sein. Handelt es sich dabei um Binärdaten, teilt man dies dem Interpreter am besten gleich durch Aufruf von <span class="literal">binmode</span><a name="idx:binmode"></a> mit dem Filehandle mit.</p>  

<p>Danach liefert <span class="literal">getc</span><a name="idx:getc"></a> entweder das nächste Zeichen aus der Datei oder, wenn das Dateiende erreicht ist, <span class="literal">undef</span>.</p> 

<div class="important">

<p><span class="literal">getc</span> stellt ohne weiteres keine Möglichkeit dar, die Benutzereingabe zeichenweise von <span class="literal">STDIN</span> zu lesen. Es ist nach wie vor das Betätigen der Enter-Taste nötig, um die Eingabe an das Programm zu übergeben. Für zeichenweises Lesen sind Änderungen am Verhalten des Terminals notwendig, die in der Dokumentation zu <span class="literal">getc</span> beschrieben sind.</p>

</div>

<p>Eine Menge von Daten Zeichen für Zeichen zu lesen ist sehr aufwändig. Deshalb gibt es alternativ die Funktion <span class="literal">read</span><a name="idx:read"></a>, die gleich einen Block vorgegebener Zeichenanzahl liest. Der Rückgabewert der Funktion teilt die Anzahl der tatsächlich gelesenen Zeichen mit.</p>

<p>Für das Schreiben in Binärdateien gibt es keine gesonderte Anweisung, hier kommt wie gewohnt <span class="literal">print</span><a name="idx:print"></a> zum Einsatz.</p> 

<p>Um den Dateizeiger, der die Position innerhalb der Datei verwaltet, zu lesen oder zu verändern, stehen die Funktionen <span class="literal">tell</span><a name="idx:tell"></a> und <span class="literal">seek</span><a name="idx:seek"></a> zur Verfügung.</p>

<div class="listing" id="lst:chario1">
<pre><code>my $picture; # Hierin speichern wir das Bild
open $fh, '&lt;', 'avatar.jpg' || die "Fehler: $!\n";
binmode($fh);
while (my $block = read $fh, 1024) {
    # Wir lesen jeweils ein kByte
    $picture .= $block;
}
# Jetzt haben wir entweder die Datei oder einen Fehler
die "Fehler beim Lesen: $!\n" if !defined $block;
close $fh;</code></pre>
<p class="caption">Lesen einer Binärdatei</p>
</div>

<p>In Listing <a href="#lst:chario1" class="listref"></a> finden Sie ein kleines Beispiel für das Lesen einer Binärdatei.</p>

<div class="exercise">
<h4>Übung</h4>
    <p>Wandeln Sie das Beispielprogramm so ab, dass es ohne die Schleife auskommt.</p>
</div>

<p>Die Details zu diesen Funktionen können Sie der Perl-Dokumentation entnehmen. Beispiele finden Sie im <q>Perl-Kochbuch</q> (siehe Kapitel <a href="#sect:sources" class="chapterref"></a>).</p>

 

<h2>Funktionen des Dateisystems</h2>

<p>Perl bietet folgende Anweisungen an, um Änderungen am Dateisystem vorzunehmen. Wer die Unix-Kommandos kennt, wird ihren Sinn sofort erkennen.</p>

<table>
	<thead>
		<tr>
			<th>Funktion</th>
			<th>Verwendung</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><span class="literal">rename</span></td>
			<td>Datei umbenennen</td>
		</tr>
		<tr>
			<td><span class="literal">unlink</span></td>
			<td>Datei löschen</td>
		</tr>
		<tr>
			<td><span class="literal">chmod</span></td>
			<td>Rechte ändern</td>
		</tr>
		<tr>
			<td><span class="literal">mkdir</span></td>
			<td>Verzeichnis erzeugen</td>
		</tr>
		<tr>
			<td><span class="literal">chdir</span></td>
			<td>Arbeitsverzeichnis wechseln</td>
		</tr>
		<tr>
			<td><span class="literal">rmdir</span></td>
			<td>Verzeichnis löschen</td>
		</tr>
		<tr>
			<td><span class="literal">stat</span></td>
			<td>Dateieigenschaften ermitteln</td>
		</tr>
	</tbody>
</table>

<p>Die mächtigste Funktion darunter ist <span class="literal">stat</span><a name="idx:stat"></a>. Sie liefert alle wichtigen <a class="footnote">Dateisystem-Informationen<span class="fntext">Betrachtet werden hier UNIX-Dateisysteme.</span></a> über die Datei, deren Name oder Dateihandle als Argument übergeben wurde. Das Funktionsergebnis ist eine Liste, deren Elemente in Tabelle <a href="#tab:stat" class="chapterref"></a> beschrieben sind. Bei den Zeitangaben wird der englische Begriff <q>Epoch</q> genannt. Hiermit ist die am 1.&nbsp;Januar 1970 beginnende Epoche gemeint, die Stunde Null der UNIX{}-Uhren.</p>
 
<pre><code class="example">my @fileinfo = (stat('text.txt'))[4, 5, 7, 8];</code></pre> 

<table>
	<thead>
		<tr>
			<th>Element</th>
			<th>Kürzel</th>
			<th>Information</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>0</td>
			<td>dev</td>
			<td>Gerätenummer des Dateisystems</td>
		</tr>
		<tr>
			<td>1</td>
			<td>ino</td>
			<td>Inode-Nummer</td>
		</tr>
		<tr>
			<td>2</td>
			<td>mode</td>
			<td>Modus (Dateityp und Rechte)</td>
		</tr>
		<tr>
			<td>3</td>
			<td>nlink</td>
			<td>Anzahl der Hardlinks auf die Datei</td>
		</tr>
		<tr>
			<td>4</td>
			<td>uid</td>
			<td>Numerische ID des Eigentümers</td>
		</tr>
		<tr>
			<td>5</td>
			<td>gid</td>
			<td>Numerische ID der Gruppe</td>
		</tr>
		<tr>
			<td>6</td>
			<td>rdev</td>
			<td>Geräte-ID (bei Spezialdateien)</td>
		</tr>
		<tr>
			<td>7</td>
			<td>size</td>
			<td>Dateigröße</td>
		</tr>
		<tr>
			<td>8</td>
			<td>atime</td>
			<td>Zeit des letzten Zugriffs seit Epoch</td>
		</tr>
		<tr>
			<td>9</td>
			<td>mtime</td>
			<td>Zeit der letzten Änderungen seit Epoch</td>
		</tr>
		<tr>
			<td>10</td>
			<td>ctime</td>
			<td>Zeit der letzten Inode-Änderung seit Epoch</td>
		</tr>
		<tr>
			<td>11</td>
			<td>blksize</td>
			<td>Bevorzugte Blockgröße</td>
		</tr>
		<tr>
			<td>12</td>
			<td>blocks</td>
			<td>Tatsächliche Zahl der belegten Blöcke</td>
		</tr>
	</tbody>
</table>

<h2>Mit Verzeichnissen arbeiten</h2>

<p>Perl kann mit Verzeichnissen<a name="idx:Verzeichnis"></a> ähnlich umgehen wie mit Dateien, nur werden statt Dateiinhalten Verzeichniseinträge (also Dateinamen) verarbeitet.</p>

<p>Zunächst wird mit <span class="literal">opendir</span><a name="idx:opendir"></a> ein Verzeichnis geöffnet. Mit dem Filehandle kann nun per <span class="literal">readdir</span><a name="idx:readdir"></a> aus dem Verzeichnis gelesen werden. Sie erhalten so die Namen der im betreffenden Verzeichnis enthaltenen Dateien. Zu den regulären Dateien liefert Perl auch die Sonderverzeichnisse und versteckten Dateien wie <span class="literal">..</span> und <span class="literal">.bashrc</span>. Das nötige Aufräumen erledigt <span class="literal">closedir</span><a name="idx:closedir"></a>.</p>   

<pre><code class="example">opendir my $config_dir, '/etc'
    or die "Fehler bei opendir!\n";
while (my $entry = readdir $config_dir) {
    print "Eintrag: $entry\n";
}
closedir $config_dir;</code></pre> 

<p>Ähnlich wie bei der zeichenweisen Ein- und Ausgabe kann auch hier mit dem so genannten <a name="idx:Verzeichniszeiger">Verzeichniszeiger</a> gearbeitet werden, wozu die folgenden Anweisungen dienen.</p>

<table>
	<thead>
		<tr>
			<th>Anweisung</th>
			<th>Verwendung</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><span class="literal">rewinddir</span></td>
			<td>Verzeichniszeiger auf ersten Eintrag positionieren</td>
		</tr>
		<tr>
			<td><span class="literal">seekdir</span></td>
			<td>Verzeichniszeiger beliebig positionieren</td>
		</tr>
		<tr>
			<td><span class="literal">telldir</span></td>
			<td>Position des Verzeichniszeigers ermitteln</td>
		</tr>
	</tbody>
</table>

<div class="exercise">
<h4>Übung</h4>
    <p>Schreiben Sie ein kurzes Perl-Programm, das die größte Datei im aktuellen Arbeitsverzeichnis ermittelt.</p>
</div>
	


<a name="sec:fileio_guertelprüfung"><h2>Gürtelprüfung</h2></a>

<img src="graphics/judogi.jpg" class="beltpic" width="200" />

<p>Der schwarze Gürtel rückt immer näher! Inzwischen ist die Farbe Ihres Gürtels kaum noch von dem des Meisters zu unterscheiden. Denn da uns langsam die Farben ausgehen, werden die restlichen Schülergrade alle durch den Braungurt belegt.</p>

<p>Aber noch steht etwas Arbeit zwischen Ihnen und dem 3.&nbsp;Kyu!</p>

<div class="exercise">
<h4>Übung</h4>
    <p>Verständnisfragen:</p>

<ol>
<li> Wie prüfen Sie, ob das Öffnen einer Datei erfolgreich war?</li>
<li> Beim Öffnen einer Datei können Sie einen Zugriffsmodus angeben.
  Erläutern Sie die verschiedenen Modi!</li>
<li> Mit welcher Perl-Funktion können Sie ein Programm anhalten und
  gleichzeitig eine Warnmeldung ausgeben?</li>
<li> Erläutern Sie das zeilenweise und das zeichenweise Lesen einer
  Datei. Wann wird welches Verfahren angewendet?</li>
<li> Erläutern Sie die Vergabe von Zugriffsrechten für Dateien und
  Verzeichnisse unter UNIX. Welche Perl-Funktion verwenden Sie dafür?</li>
<li> Warum kann es sinnvoll sein, den Zugriff auf eine Datei zu
  sperren? Erläutern Sie dies an einem Beispiel, und geben Sie die
  Perl-Funktion an, mit der Sie eine Datei sperren können.</li>
<li> Erklären Sie die Vorgehensweise beim Auslesen eines
  Verzeichnisses. Welche Perl-Funktion verwenden Sie?</li>
</ol>

</div>

	
<div class="exercise">
<a name="exerc:vector-add"><h4>Übung</h4></a>

  <p>Entwickeln Sie ein Programm <span class="filename">vector-add.pl</span>, das eine Datei mit
  Koordinaten von 2D-Vektoren einliest und diese formatiert ausgibt.</p>

  <p>Erweitern Sie im zweiten Schritt Ihr Programm so, dass es die
  Vektoren zusätzlich aufaddiert und zum Schluss den Summenvektor
  normalisiert ausgibt.</p>

  <ol>
  <li> Lesen Sie die Koordinaten zeilenweise mit dem Operator
    <span class="literal">&lt;&gt;</span> ein.</li>
  <li> Die Datei enthält die Vektorkoordinaten zeilenweise in
    folgendem Format:</li>
<pre><code class="example">1.5 2.3
-7.2 5.0
...
</code></pre>
  <li> Die Ausgabe der Vektoren soll im Format <span class="literal">( -7.20; 5.00)</span>
    (Zahlen jeweils siebenstellig mit 2 Dezimalen) erfolgen.</li>
  <li> Verlagern Sie die Aufgaben <q>formatierte Ausgabe eines Vektors</q>
    und <q>Addieren zweier Vektoren</q> jeweils in ein Unterprogramm.</li>
  </ol>

</div>


<div class="exercise">
<h4>Übung</h4><a name="exerc:dirlist"></a>

    <p>Erstellen Sie ein Perl-Programm <span class="filename">dirlist.pl</span>, das den
    Inhalt eines über die Tastatur eingegebenen Verzeichnisses in eine
    Datei schreibt.</p>

    <ol>
    
     <li> Programmieren Sie eine Eingabemöglichkeit für den Verzeichnisnamen.</li>
    
     <li> Öffnen Sie die Datei <span class="filename">verzeichnisinhalt.txt</span> im
    Schreibmodus. Fangen Sie mögliche Fehler ab.</li>
    
     <li> Öffnen Sie den eingegebenen Dateipfad als Verzeichnis. Fangen Sie
    mögliche Fehler ab.</li>

 	<li> Durchlaufen Sie das Verzeichnis in einer
    geeigneten Schleife.</li>

 	<li> Es sollen nur Dateinamen beachtet werden.
    Filtern Sie alle anderen Einträge und Unterverzeichnisse aus.</li>

	<li>
    Zusätzlich soll die Dateigröße ausgegeben werden. Ermitteln Sie diese mit
    einem Dateiprüfoperator. Rechnen Sie die in Bytes zurückgegebene
    Dateigröße in KByte um (Division durch 1024).</li>
 	
	<li> Schreiben Sie die
    Informationen in die Datei.</li>

 	<li> Schließen Sie Datei und Verzeichnis
    wieder.</li>

</ol>

</div>
	


<div class="exercise">
<h4>Übung</h4><a name="exerc:dirsuche"></a>

    <p>Erstellen Sie ein Programm <span class="filename">dirsuche.pl</span>, das einen Teil eines
    Dateinamens und einen Verzeichnisnamen entgegennimmt und rekursiv,
    beginnend mit diesem Verzeichnis, nach Dateien sucht, die den Suchbegriff
    enthalten.</p>

  <ol>
  <li> Programmieren Sie die Eingabe eines Dateinamens und eines
    Verzeichnisnamens.</li>
  <li> Da die Suche rekursiv auch in allen Unterverzeichnissen
    durchgeführt werden soll, müssen Sie die Suche in einem
    Unterprogramm realisieren.</li>
  <li> Das Unterprogramm soll als Argumente das zu durchsuchende
    Verzeichnis und den Suchbegriff erhalten.</li>
  <li> Verwenden Sie im Unterprogramm nur lokale Variablen und ein
    unbenanntes Verzeichnis-Handle.</li>
  <li> Prüfen Sie für jeden Verzeichniseintrag, ob der Suchbegriff im
    Dateinamen enthalten ist. Dabei soll keine Unterscheidung nach
    Groß- und Kleinbuchstaben erfolgen. Stellen Sie zusätzlich sicher,
    dass Sie nur in Dateinamen und nicht in Verzeichnisnamen suchen.
    Bei einem Sucherfolg soll der komplette Dateipfad ausgegeben
    werden.</li>
  <li> Falls Sie ein Unterverzeichnis finden, soll dieses ebenfalls
    durchsucht werden.</li>
  <li> Fügen Sie einen Zähler als globale Variable ein, der am Ende
    des Programms ausgibt, wie viele Dateien gefunden wurden.</li>
  </ol>
