== Zusammengesetzte Datentypen [[cha:complexdata]]

[quote, Larry Wall in comp.lang.perl]
____
"I find this a nice feature but it is not according to the documentation. Or is it a BUG?"

"Let's call it an accidental feature. :-)"
____

In diesem Kapitel lernen Sie die Datentypen ``Array'' und ``Hash'' kennen, mit denen Sie größere Mengen von Werten verwalten können.  

Einzelne Werte in skalaren Variablen speichern zu können ist eine wichtige Voraussetzung, um in einem Perl-Programm Daten zu verarbeiten. Sobald jedoch viele gleichartige oder zumindest in engem Zusammenhang stehende Daten verwaltet werden sollen, stellen Skalare keine sinnvolle Lösung mehr da.

Hier kommen die so genannten zusammengesetzten Datentypen zum Einsatz, die in der Lage sind, viele skalare Werte unter einem gemeinsamen Bezeichner abzulegen und wieder abzurufen.




=== Listen

Eine Liste indexterm:[Liste]  stellt eine beliebig lange Reihe skalarer Werte dar. Wie üblich ist der Typ der einzelnen Werte nicht festgelegt; er kann auch von Wert zu Wert unterschiedlich sein.

Explizit werden Listen innerhalb runder Klammern geschrieben:

[source,perl]
----
( "Links", "Zwo", 3, 4 )
----

Die Aufzählung von Zeichenketten in einer Liste verursacht einiges an Tipparbeit, weil ständig Anführungszeichen an den Beginn und das Ende jedes Strings gesetzt werden müssen. Bei Zeichenketten, die Texte mit Leerzeichen enthalten, bleibt der Entwicklerin das nicht erspart. Eine Liste von Worten jedoch ist mit dem `qw`-Operator indexterm:[qw]  (``quote words'') schnell gebaut:

[source,perl]
----
qw( rot gelb blau )
qw/ elf 12 dreizehn /
qw( $ene $mene $muh )
----

Auch für Listen aufeinander folgender natürlicher Zahlen gibt es eine komfortable Schreibweise:

[source,perl]
----
my @first_hundred = (0..99);
----

Sie ist aber nur für aufsteigende Zählung definiert.

Um den Zwang zur Verwendung von Escape-Zeichen indexterm:[Escape-Zeichen]  zu minimieren, können verschiedene Zeichen zur Begrenzung der Liste verwendet werden. Runde Klammern sind mehr oder weniger der Standard, aber auch der Schrägstrich und der Klammeraffe kommt hier oft zum Einsatz.

Es sei betont, dass jedes Element der entstehenden Liste als Zeichenkette gespeichert wird, selbst wenn es sich um eine Ziffernfolge handelt. Wie das letzte Beispiel zeigt, erlaubt der ``quote words''-Operator auch die Interpolation von Variablen.

In vielen Konstrukten eines Perl-Programms können sowohl Skalare indexterm:[Skalar]  als auch Listen zum Einsatz kommen. Weil dabei das Verhalten des Programms zwischen beiden Alternativen meist unterschiedlich ist, spricht man von der Unterscheidung zwischen ``skalarem Kontext'' indexterm:[Kontext!skalarer]  und ``Listenkontext'' indexterm:[Kontext!Listen-].

*Übung:* Wie kann die Folge der ersten 10 Fibonacci-Zahlen als Liste in Perl formuliert werden?

NOTE: Ein hilfreicher Tipp zum Aufschreiben von Listen: Auch nach dem letzten Element erlaubt Perl ein Komma, ohne dass dadurch am Ende der Liste ein ``leeres Element'' entsteht. Die Angewohnheit, dieses letzte Komma immer zu schreiben, erleichtert es, nachträglich ein weiteres Element anzufügen oder die Elemente der Liste umzuordnen (zum Beispiel durch die Sortierfunktion des Editors), ohne daran denken zu müssen, das fehlende Komma an der richtigen Stelle nachzureichen.

[source,perl]
----
( 
	"rot",
	"gelb",
	"gruen",
	"blau",
	"violett",
	"orange",
)
----


=== Arrays

Ein Array indexterm:[Array]  speichert beliebig viele skalare Elemente in einer festen Reihenfolge. Jedem Array-Element wird dabei ein fortlaufender Index indexterm:[Index]  zugeordnet, mit dem Index 0 beginnend. Ein Array kann man somit mit einem Schrank vergleichen, dessen Schubladen in einer Reihe angeordnet und nummeriert sind:

image:image/array.png[width="50%]

Ein Array kann elementweise oder durch Zuweisung einer Liste gefüllt werden:

[source,perl]
----
# Listenzuweisung
@array1 = ( "links", 2, 3, 4 );

# Einzelnes Element
$array1[4] = 17;

# Listenzuweisung aus Array
@array2 = @array1;
----

Es ist offensichtlich, dass der Zuweisungs-Operator auch mit Listen arbeiten kann. Wenn Sie sich hier wundern, wo bei der Zuweisung von Einzelelementen plötzlich das Dollarzeichen herkommt, wo doch bei Arrays ein Klammeraffe vorangestellt wird, sollten Sie den Abschnitt über <<sub:variablentypen,Variablentypen>> noch einmal lesen. Zur Erinnerung: Das vorangestellte Sigil indexterm:[Sigil] richtet sich nicht nach dem Variablentyp, sondern nach dem Datentyp des Wertes footnote:[Jedenfalls noch in Perl 5; für Perl 6 hat man sich für die intuitivere Variante entschieden.], auf den zugegriffen wird! Und da hier auf ein einzelnes, skalares Element zugegriffen wird, ist nicht der Klammeraffe, sondern das Dollarzeichen angebracht.

Wie das Sigil vor dem Bezeichner hängt auch der Wert einer Array-Variablen vom Kontext ab, in dem sie verwendet wird. Im indexterm:[Kontext, Listenkontext] Listenkontext, also der üblichen Situation, erhält man die Liste der gespeicherten Elemente zurück, die im Array abgelegt sind. So kann man den Inhalt eines Arrays einfach einer anderen Array-Variablen zuweisen.

Wird die Array-Variable jedoch in einem skalaren Kontext verwendet, ist der Wert des Ausdrucks die Anzahl der Array-Elemente. Der Haken dabei ist: die Verwendung einer Array-Variablen erzeugt gewöhnlich automatisch einen Listenkontext! Den skalaren Kontext muss man daher durch die Anweisung `scalar` erzwingen:

[source,perl]
----
@array = (1, 2, 3, 5, 8, 13);
print scalar @array, "\n";
----

Um nicht die Anzahl der Elemente, sondern den höchsten indexterm:[Index] Index eines Arrays zu erhalten, fügen Sie zwischen Symbol und Bezeichner ein `#` ein. Und ja, auch hier ist das Dollarzeichen das richtige Sigil:

[source,perl]
----
print "Hoechster Index: ", $#array, "\n";
----

Da Indizes immer von 0 an gezählt werden, ist der maximale Index eines Arrays immer um 1 kleiner als dessen Anzahl Elemente.

*Übung:* Schreiben Sie ein kurzes Perl-Programm, das die ersten 10 Fibonacci-Zahlen berechnet, in einem Array speichert und dessen Inhalt danach ausgibt. Die Berechnungs-Vorschrift lautet:
	
* f~0~ = 0
* f~1~ = 1
* f~n~ = f~n-2~ + f~n-1~ für n >= 2


==== Negative Indizes [[sect:negative_indizes]]

Perl erlaubt auch negative indexterm:[Index] Indizes wie -1, -2 und so weiter. Erreicht werden damit aber natürlich keine verborgenen Elemente, die in der Reihenfolge noch vor dem Element 0 liegen. Perl tut bei solchen Indizes etwas sehr praktisches: Negative Indizes werden vom letzten Element des Arrays aus rückwärts gezählt! Mit dem Index -1 wird also das letzte Element des Arrays angesprochen, mit -2 das zweitletzte usw.

Schwer zu lesende Konstrukte wie `$array[@array-3]` werden damit unnötig. 
 

==== Funktionen für Arrays

==== Das Array als Stapel und Schieberegister

Mit den vielen Daten in einem Array kann man natürlich auch viel anfangen. Deshalb gibt es in Perl einen großen Satz an indexterm:[Funktion, Arrayfunktionen] Funktionen, mit denen Arrays und ihre Inhalte manipuliert werden können.

Jede Arrayfunktion benötigt normalerweise zumindest den Namen des zu behandelnden Arrays. Perl hat hier aber eine Besonderheit: wird beim Funktionsaufruf kein Variablenname angegeben, arbeitet Perl standardmäßig mit dem Array `@_`. Wie alle Variablen, deren Namen ein Sonderzeichen ist, ist dieses Array bereits im Sprachumfang enthalten. Es muss (und kann) daher nicht mit indexterm:[my] `my` deklariert werden.

Hier sind die wichtigsten Arrayfunktionen:

Die beiden Funktionen indexterm:[push] `push` und indexterm:[pop] `pop` interpretieren ein Array als indexterm:[Stapel] ``Stapel'', bei dem das erste Element ganz unten liegt. Bei solch einem Stapel kann man (ohne größere Komplikationen) nur auf das oberste Element zugreifen -- man kann es herunternehmen oder ein neues Element obendrauf legen. Und genau das machen die beiden genannten Funktionen:

`pop` nimmt das letzte Element des Arrays weg und liefert dessen Wert.

[source,perl]
----
$elem = pop @array;
----

Und `push` wird verwendet, um einem Array weitere Werte hinzuzufügen:

[source,perl]
----
push @array, 19, "Test";
----

Eine andere Art, ein Array zu verstehen, ist das sogenannte indexterm:[Schieberegister] ``Schieberegister''. Dieser Begriff stammt aus der Digitaltechnik und meint eine Reihe hintereinander liegender Speicher, deren Werte in eine Richtung verschoben werden können. Der am Ende der Kette liegende Speicher des Registers schiebt seinen Wert dabei in einen speziellen Zugriffsspeicher, der als einziger ausgelesen und beschrieben werden kann. Mit jedem Schiebevorgang ``fällt'' quasi ein Wert aus dem Schieberegister.

Entsprechend sind die Perl-Anweisungen in diesem Zusammenhang benamt: indexterm:[shift] `shift` liefert den Wert des ersten Elements des Arrays und entfernt dieses. Alle folgenden Elemente werden einen Index nach vorn verschoben:

[source,perl]
----
$elem = shift @array;
----

indexterm:[`unshift`] `unshift` hingegen fügt dem Array einen neuen Wert als erstes Element hinzu. Alle bereits enthaltenen Elemente werden einen Index nach hinten geschoben.

[source,perl]
----
unshift @array, "Neues Element Nr. 0";
----

*Übung:* Bauen Sie ein kleines Perl-Programm, das die Eingaben des Benutzers per `push` in einem Array ablegt, bis er den Text ``EOT'' eingibt. Lassen Sie die Array-Elemente anschließend zeilenweise ausgeben.


==== Zerlegen und Zusammenfügen von Zeichenketten

Mit den folgenden beiden Anweisungen kann eine Zeichenkette in eine Liste einzelner Strings zerlegt bzw. aus einer Liste zusammengesetzt werden. Dabei kann jeweils ein Trennzeichen definiert werden, das zur Zerlegung genutzt beziehungsweise zwischen die Einzelstrings eingefügt wird. Das Zerlegen erledigt die Funktion indexterm:[split] `split`. Sie benötigt dazu die zu teilende Zeichenkette sowie das Trennzeichen (oder ein indexterm:[Ausdruck, Regulärer Ausdruck] ``regulärer Ausdruck'' genanntes Muster, das in einem <<cha:regex, späteren Kapitel>> besprochen werden wird). Das Trennzeichen selbst wird bei der Auftrennung entfernt.

[source,perl]
----
$string = "Dies ist ein Beispiel";
@parts = split ' ', $string;
# @parts = ('Dies', 'ist', 'ein', 'Beispiel')
----

indexterm:[join] `join` setzt eine Liste zu einer Zeichenkette zusammen. Es kann ein Trennzeichen definiert werden, das zwischen die einzelnen Elemente eingefügt wird.

[source,perl]
----
$passwdentry = join ':', @userdata;
----

*Übung:* Schreiben Sie ein Perl-Programm, das den Benutzer einen Satz eingeben lässt, diesen in einzelne Worte zerlegt und die Worte dann zeilenweise ausgibt.


==== Sortieren von Arrayelementen

indexterm:[sort] `sort` liefert die Elemente einer Liste in einer sortierten Reihenfolge zurück.

[source,perl]
----
foreach (sort @namen) {
  print $_, "\n";
}
----

Die Sortierreihenfolge ist standardmäßig ``alphabetisch aufsteigend''. Diese kann aber geändert werden.

Ein Sortieralgorithmus basiert im Kern immer darauf, für zwei aufeinander folgende Elemente eines Arrays zu entscheiden, ob sie bereits in der richtigen Reihenfolge sind, und sie gegebenenfalls auszutauschen. Dies wird so lange wiederholt, bis für jeden Index $n$ gilt, dass das Element e~n~ ``kleiner oder gleich'' dem Element e~n+1~ ist. Entscheidend ist demnach, _wie_ zwei benachbarte Elemente verglichen werden, also was ``kleiner oder gleich'' bedeutet. Standardmäßig verwendet `sort` die Vergleichsoperatoren indexterm:[Vergleichsoperator] `lt`, `eq` und `gt`, woraus eben die Vorschrift ``alphabetisch aufsteigend'' resultiert.

Dieses Verhalten können Sie aber ändern, indem Sie die passende Vergleichsoperation selbst programmieren und der `sort`-Funktion als Programmblock übergeben. Die Operation muss als Ausdruck formuliert werden, in dem die Variable `$a` (der Wert von e~n~) mit der Variablen `$b` (dem Wert von e~n+1~) verglichen wird. Der Wert des Ausdrucks bestimmt das Verhalten der Sortierfunktion:

[options="header",cols="20%,80%"]
|=================================
| Wert | Konsequenz
| -1   | a ist ``kleiner als'' b -- die Reihenfolge stimmt, keine Aktion
|  0   | a ist ``gleich'' b -- auch hier ist keine Aktion nötig
| +1   | a ist ``größer als'' b -- die Elemente müssen vertauscht werden
|=================================

`sort` führt diese Vergleiche und Vertauschungen so oft durch, bis erreicht ist, dass alle Paare die richtige Reihenfolge haben und somit das ganze Array sortiert ist.

Für das Programmieren der Vergleichsoperation bietet Perl zwei besondere Vergleichsoperatoren indexterm:[Operator!Vergleichs-] , die einen der drei oben genannten Werte liefern, die sogenannten indexterm:[Operator, Compare-Operator] ``Compare-Operatoren''. Es gibt einen Compare-Operator für Zahlen und einen für Zeichenketten:

[source,perl]
----
$num1 <=> $num2
$string1 cmp $string2
----

Die Sortierreihenfolge zu ändern ist einfach, indem man das Vorzeichen des Vergleichs invertiert:

[source,perl]
----
@sortiert = sort { -1 * ($a cmp $b) } @array;
----

Näher betrachtet gibt es dafür einen raffinierteren Weg. Wir täuschen Perl einfach bezüglich der Reihenfolge:

[source,perl]
----
@sortiert = sort { $b cmp $a } @array;
----

Soll jedoch einfach die Reihenfolge der Elemente einer Liste oder eines Arrays umgekehrt werden, ist die Funktion indexterm:[reverse] `reverse` die effizienteste Lösung. 



==== Array-Slices und Zuweisung an Listen

Perl kann aus einem Array nicht nur ein skalares Einzelelement, sondern auch eine Liste von Elementen auslesen. Umgekehrt kann eine Zuweisung statt an eine einzige skalare Variable auch an eine Liste von skalaren Variablen oder eine Reihe von Array-Elementen erfolgen.

[source,perl]
----
my @array = ( 1, 3, 5, 7, 9 );
print join ' ', @array[1, 3];

@array[4,7] = ('vier', 'sieben');
----

indexterm:[Array, Slice] Array-Slices eröffnen praktische Möglichkeiten bei Funktionen, die eine Liste als Ergebnis liefern. Die Zuweisungen...

[source,perl]
----
my @statinfo = stat('text.txt');
my @fileinfo = @statinfo[4, 5, 7, 8];
----

...lassen sich optimieren, indem man das Funktionsergebnis in eine Liste wandelt:

[source,perl]
----
my @fileinfo = (stat('text.txt'))[4, 5, 7, 8];
----

Und einzelne Zuweisungen an skalare Variablen...

[source,perl]
----
my $uid = $fileinfo[0];
my $gid = $fileinfo[1];
my $size = $fileinfo[2];
my $atime = $fileinfo[3];
----

...können durch eine Zuweisung an eine Liste zusammengefasst werden:

[source,perl]
----
my ($uid, $gid, $size, $atime) = @fileinfo[0..3];
----

So kann schließlich die Abfrage der relevanten Daten in einer Zeile und ohne Hilfsvariablen erledigt werden:

[source,perl]
----
my ($uid, $gid, $size, $atime)
  = (stat('text.txt'))[4, 5, 7, 8];
----


*Übung:* Gegeben sei ein Array `satz` aus Zeichenketten, die jeweils aus mehreren Worten bestehen. Wie müsste eine `sort`-Anweisung aussehen, die das Array nach dem jeweils zweiten Wort sortiert? (Beispiel: ``Ich bin ...'' wird vor ``Du hast ...'' einsortiert, weil ``bin'' kleiner als ``hast'' ist.)


=== Hashs

Mit dem indexterm:[Hash] Hash gibt es einen zweiten Datentyp, der in der Lage ist, beliebig viele skalare Werte zu speichern. Anders als das Array sind aber Hash-Elemente nicht in einer bestimmten Reihenfolge abgelegt, die durch einen Index abgebildet wird. Vielmehr wird jeder Wert in einem Hash einer eindeutigen Zeichenkette zugeordnet, die als indexterm:[Schlüssel] ``Schlüssel'' bezeichnet wird. Der diesem Schlüssel zugeordnete Wert darf, wie die Werte in einem Array, ein beliebiger Skalar sein.

Kurz gesagt: Jeder Schlüssel in einem Hash identifiziert eindeutig die ihm zugeordnete Zahl oder Zeichenkette. Eindeutig bedeutet, dass jeder Schlüssel im Hash nur einmal vorkommt. Im Endeffekt speichert ein Hash also Wertepaare aus einem Schlüssel und einem beliebigen skalaren Wert footnote:[Auch hier umfasst ``skalar'' neben den Zahlen und Strings die bereits erwähnten Referenzen sowie `undef`. Noch ist dies aber nicht von Bedeutung.].

Die Anzahl möglicher Hash-Elemente wird wieder nur durch den verfügbaren Arbeitsspeicher begrenzt.

Als Bild für das Hash eignet sich ein Schrank, bei dem jede Schublade mit einem Etikett versehen ist, das einen beliebigen, aber eindeutigen Namen trägt.

image:image/hash.png

Diese Analogie berücksichtigt allerdings nicht, dass Perl für Hashelemente keine Reihenfolge definiert. (Dazu müssten die Schubladen irgendwie frei im Raum herumschweben.) Wenn Sie also den Inhalt eines Hashs einem anderen Hash zuweisen, wird dieses zwar die gleichen Wertepaare enthalten, aber nicht zwangsläufig in der gleichen Ordnung. Wo Reihenfolge eine Rolle spielt, ist das Array die besser geeignete Datenstruktur.

Das Hash bietet sich überall dort an, wo Sie mit Wertepaaren zu tun haben. Ein gutes Beispiel ist die Anschrift einer Person, die aus Feldern wie ``Nachname'', ``Vorname'', ``Straße'', ``Hausnummer'' und so weiter besteht. Jedes Feld wird in Perl zu einem Hash-Schlüssel, dem jeweils der Adressteil als Wert zugeordnet wird. Sie werden gleich sehen, wie dies in Perl umgesetzt wird. Speziell an diesem Beispiel können Sie auch erkennen, dass der Begriff der Reihenfolge hier keine Rolle spielt: ob im Hash der Vorname vor der Straße abgelegt wird, ist nicht relevant. Wenn Sie die Felder in einer bestimmten Reihenfolge ausgeben wollen, ist das eine andere Sache; das können Sie entsprechend programmieren.



==== Hashs füllen

Auch im Hash können neue Werte (-paare) entweder einzeln oder in Form einer ganzen Liste abgelegt werden.

Wie man beim Array einzelne Elemente adressiert, indem man dem Variablennamen den indexterm:[Index] Index in eckigen Klammern anfügt, so ist es beim Hash der Schlüssel in geschweiften Klammern:

[source,perl]
----
$hash1{'Alter'} = 17;
----

Wird einer Hash-Variablen eine ganze Liste auf einmal zugewiesen, muss diese immer aus Schlüssel-Wert-Paaren bestehen:

[source,perl]
----
%hash2 = ('Linux', 'Linus Torvalds', 
    'Windows', 'Bill Gates');

%hash3 = (
  Linux => 'Linus Torvalds',
  Windows => 'Bill Gates',
);
----

Die erste Schreibweise hat den Nachteil, dass in einer längeren Liste nur noch schwer auf einen Blick zu erkennen ist, welches die Schlüssel und welches die ihnen zugeordneten Werte sind. Daher kennt Perl auch eine zweite Schreibweise, bei der bei jedem Paar ein stilisierter Pfeil die Zuordnung des Wertes zum Schlüssel symbolisiert. Das zweite Beispiel demonstriert noch eine zweite Erleichterung beim Aufschreiben von Paar-Listen: da ein Hash-Schlüssel stets eine Zeichenkette ist, dürfen bei diesem wie bei indexterm:[qw] `qw` die Anführungszeichen auch weggelassen werden -- unter der Bedingung, dass er sich an die Regeln für Bezeichner hält.



==== Hashs auslesen

Den Wert eines einzelnen Hash-Elementes erhält man, indem man dessen Schlüssel in geschweiften Klammern dem Bezeichner der Hashvariablen anfügt:

[source,perl]
----
$wert = $hash{'schluessel'};
----

Das oben erwähnte Beispiel einer Anschrift könnte in Perl so aussehen:

[source,perl]
----
my %adresswert_fuer = (
    nachname => 'Mustermann',
    vorname => 'Hans',
    strasse => 'Testallee',
    hausnummer => 103,
    postleitzahl => '04711',
    wohnort => 'Musterhausen',
    );
    
print $adresswert_fuer{vorname}, ' ', 
      $adresswert_fuer{nachname},
      ' wohnt in ',
      $adresswert_fuer{wohnort},
      ".\n";
----

Wird die Hash-Variable ohne angefügten Schlüssel verwendet, hängt ihr Wert, genau wie bei einer Arrayvariablen, vom indexterm:[Kontext] Kontext innerhalb des Ausdrucks, in dem sie verwendet wird, ab. Ein Listenkontext wirkt wie die Umkehrung der Listenzuweisung: die Variable liefert die Liste der in ihr gespeicherten Wertepaare. Und auch im skalaren Kontext verhält sich das Hash ähnlich dem Array, denn eine Hash-Variable im skalaren Kontext liefert die Anzahl der in ihr gespeicherten Wertepaare.

Meist ist man aber gar nicht an der Liste der Wertepaare, sondern an der Liste der Schlüssel allein interessiert, denn über diese Schlüssel erhält man bei Bedarf jederzeit die ihnen zugeordneten Werte. Die Anweisung indexterm:[keys] `keys %hash` liefert diese Liste. Analog dazu liefert indexterm:[values] `values %hash` die Liste der Werte. Weil man von den so erhaltenen Werten aber nicht mehr zurück auf deren Schlüssel schließen kann, wird `keys` deutlich häufiger eingesetzt als `values`.



==== Existenz von Hashelementen

Wenn Sie prüfen wollen, ob ein bestimmtes Hashelement existiert, bietet sich zunächst die Funktion indexterm:[defined] `defined` als Lösung an. Sie liefert den logischen Wert ``falsch'', wenn ihr Argument indexterm:[undef] `undef` ist, und ansonsten ``wahr''. Und da die Abfrage eines Hashelements, das nicht existiert, `undef` liefert, scheint das ja zu passen.

Es kann aber auch ein existierendes Hashelement durchaus den (Nicht-) Wert `undef` enthalten! Damit wird das Ergebnis von `defined` zweideutig. Folgendes Beispiel verdeutlicht den Unterschied zwischen ``nicht definiert'' und ``nicht existent'':

[source,perl]
----
my %alter_von = (
    'Carola' => 28, 
    'Markus' => undef,
    );

my $exist_carola = defined $alter_von{Carola};
# = wahr, Element existiert

my $exist_stefan = defined $alter_von{Stefan};
# = falsch, Element existiert nicht

my $exist_markus = defined $alter_von{Markus};
# = falsch, Element existiert aber!
----

Die Funktion `defined` liefert hier kein eindeutiges Ergebnis, denn liefert sie ``falsch'', kann das entweder bedeuten, dass das Element nicht existiert, oder dass das Element existiert, aber `undef` statt eines skalaren Werts enthält.

Das Problem ist, dass `defined` erst nach dem Zugriff auf das Hashelement auf den dabei erhaltenen Wert angewendet wird. Ist dieser Wert `undef`, ist aber schon nicht mehr zu erkennen, ob er tatsächlich so im Hash stand oder lediglich das Ergebnis eines Zugriffs auf einen nicht existenten Schlüssel war.

Um die Existenz eines Hashelements, das einen bestimmten Schlüssel hat, zweifelsfrei prüfen zu können, gibt es in Perl deshalb die Funktion indexterm:[exists] `exists`.

[source,perl]
----
%hash = ( 'A' => 8153, 'B' => undef );

print ( defined $hash{'A'} ) ? 'A hat einen Wert' 
    : 'A ist undefiniert', ".\n";
print ( defined $hash{'B'} ) ? 'B hat einen Wert'
    : 'B ist undefiniert', ".\n";
print ( defined $hash{'C'} ) ? 'C hat einen Wert' 
    : 'C ist undefiniert', ".\n";

print ( exists $hash{'A'} ) ? 'A existiert' 
    : 'A existiert nicht', "\n";
print ( exists $hash{'B'} ) ? 'B existiert' 
    : 'B existiert nicht', "\n";
print ( exists $hash{'C'} ) ? 'C existiert' 
    : 'C existiert nicht', "\n";
----

IMPORTANT: Während `defined` den Wert eines Hashelements betrachtet, prüft `exists` wirklich den Schlüssel auf Existenz.



=== Schleifen für Arrays und Hashs

Es gibt ein einfaches Indiz dafür, dass ein Perl-Programm von einem C-Programmierer stammt: es verwendet Schleifen mit Index-Zählern, um Arrays zu verarbeiten.

[source,perl]
----
for (my $i = 0; $i &lt; @array; $i++) {
    my $element = $array[$i];
    ...
}
---- 

Natürlich ist es eine valide und funktionierende Vorgehensweise, zuerst die Anzahl der Elemente eines Arrays zu ermitteln und diese dann in einer Zählerschleife indexterm:[Schleife, Zählerschleife] abzufragen. Element für Element ist irgendwann jedes Array oder Hash verarbeitet. Aber Perl kennt dazu ein weitaus eleganteres Werkzeug als die Index-Schleife: die `for`-Schleife indexterm:[for] für Listen.

Um diese Schleife von der klassischen `for`-Schleife mit Zähler zu unterscheiden, erlaubt Perl auch die Schreibweise indexterm:[foreach] `foreach`.

Eine `foreach`-Schleife basiert nicht auf einem Zähler, sondern direkt auf einer Liste. Und es gibt zwar auch hier eine Schleifenvariable, aber diese nimmt nicht die einzelnen Werte eines Zählers an, sondern der Reihe nach den jedes Listenelements.

----
foreach «variable» ( «liste» ) {
  ...
}
----

Die Schreibweise `foreach`, englisch für ``für jedes einzelne aus...'', ist bemerkenswert anschaulich. Wenn Sie sich aber Tipparbeit ersparen wollen, können Sie auch die Kurzform `for` verwenden. Aufgrund der gänzlich verschiedenen Syntax besteht hier wohl kaum Verwechslungsgefahr mit der gleichnamigen Zählerschleife.

Die Schleifenvariable wird man in aller Regel mit indexterm:[my] `my` als  lexikalische Variable definieren, um sie so lokal wie möglich zu halten. Die folgenden Beispiele veranschaulichen diese Praxis.

Aus einem Array kann die Liste, über die iteriert werden soll, direkt ausgelesen werden, denn es besteht ja ein indexterm:[Kontext, Listenkontext] Listenkontext. Sie müssen sich also gar nicht mehr mit Indizes auseinandersetzen:

[source,perl]
----
# Alternative Zaehlerschleife
foreach my $zahl ( 1..10 ) {
  print $zahl, "im Quadrat ist ", $zahl*$zahl, "\n";
}
----

Ein Hash liefert im Listenkontext bekanntlich eine Liste aus Wertepaaren, was meist eher unhandlich ist. Hier hilft vor allem die Funktion indexterm:[keys] `keys`, selten wird alternativ auch indexterm:[values] `values` verwendet:

[source,perl]
----
foreach $postleitzahl ( keys %ort_mit_plz ) {
  print $postleitzahl, " => ",
    $ort_mit_plz{$postleitzahl}, "\n";
}
----

Wird die Angabe der Schleifenvariablen weggelassen, verwendet Perl selbständig die Spezialvariable `$_`. Hiermit unterstützt Perl ein wenig die latente Faulheit aller Entwickler:

[source,perl]
----
foreach ( keys %hash ) {
  print $_, " => ", $hash{$_}, "\n";
}
----

Diese Faulheit widerspricht allerdings allen Ansprüchen an lesbaren Code. `$_` ist kaum besser als gar kein Name, denn der Bezeichner sagt ja wirklich nichts über den aktuellen Zweck der Variablen aus.

IMPORTANT: Verwenden Sie immer aussagekräftige Namen für Schleifenvariablen.

Bezüglich der Schleifenvariable gilt es noch eine weitere Eigenheit zu beachten: Wenn Sie sie nicht mit `my` zu einer lexikalischen Variable machen, wird Perl ihr von sich aus mit dem `local`-Verfahren einen lokalen Wert geben. Sie ist also entweder ohnehin nur innerhalb des Schleifenrumpfs existent oder erhält nach Schleifenende wieder den Wert, den sie vorher hatte.

IMPORTANT: Auf den Wert der Schleifenvariable einer `foreach`-Schleife erhält man nur während deren Abarbeitung Zugriff.

Ein Werkzeug wie `foreach` fehlt vielen Programmiersprachen. Da muss dann oft umständlich mit Zählern und Indizes gearbeitet werden. Also machen Sie es sich selbst nicht schwerer, als es in Perl unbedingt sein muss und nutzen Sie `foreach`, wann immer Sie Listen verarbeiten müssen.


=== Iteratoren

Als indexterm:[Iterator] Iterator wird ein Konstrukt bezeichnet, das jedes Element einer Liste mit den gleichen Anweisungen bearbeitet. Iteratoren können mit Hilfe von Schleifen -- ganz besonders mit `foreach` -- selbst programmiert werden. Perl hat aber bereits spezielle Iteratoren im Sprachumfang.


==== Listen durchsuchen 

Will man eine Liste nach einem bestimmten Wert durchsuchen, ist schnell eine entsprechende Schleife zusammengezimmert. Eine schnellere Lösung aber ist die Anweisung indexterm:[grep] `grep`. Wie das gleichnamige UNIX-Kommando durchsucht es die als Argument übergebene Liste nach Elementen, die ein bestimmtes Kriterium erfüllen. Weil hier schneller C-Code in Aktion tritt, ist `grep` einer handgeschriebenen Schleife weit überlegen.

Zusätzlich zur Liste benötigt `grep` noch das Suchkriterium. Das kann entweder ein Code-Block sein oder ein regulärer Ausdruck indexterm:[Regulärer Ausdruck]. Reguläre Ausdrücke heben wir uns für später auf, daher sei hier zunächst nur der Codeblock betrachtet.

In einem Ausdruck liefert `grep` die Liste aller Elemente zurück, bei denen der Code-Block den logischen Wert ``wahr'' ergab. Auf das gerade zu beurteilende Element wird über `$_` zugegriffen footnote:[Vorsicht, das ist wörtlich zu nehmen: Verändert der Code-Block den Variableninhalt, verändert sich auch das Listenelement!]. 

[source,perl]
----
my @gerade_zahlen = grep { $_ % 2 == 0 }, @zahlen;
---- 
   

==== Listen transformieren

Soll jedes Element einer Liste einer bestimmten Bearbeitung unterzogen werden, gibt es erneut ein effizienteres Werkzeug als eine Schleife: indexterm:[map] `map`.

Die Anweisung `map` wird syntaktisch genauso eingesetzt wie `grep`: Argumente sind ein Code-Block sowie die Eingangsliste, und als Ergebnis erhält man wieder eine Liste. Nur dient der Code-Block nun der Transformation der einzelnen Listenelemente und die Ergebnisliste enthält die Resultate dieser Verarbeitung. Als Platzhalter für das einzelne Listenelement dient ein weiteres Mal die Spezialvariable `$_`. 

Soll zum Beispiel eine Liste von Zeichenketten mit Hilfe der Funktion `uc` (``upper case'') in Großbuchstaben umgewandelt werden, genügt folgende kurze Anweisung:

[source,perl]
----
my @laute_worte = map { uc $_ } @leise_worte;
----    

`map` kann auch Hashs füllen, wenn der Code-Block Wertepaare liefert:

[source,perl]
----
my %quadrat_von = map { $_ => $_ * $_ } ( 0..100 );
----

Mit `map` können sehr mächtige Anweisungen zur Verarbeitung von Listen programmiert werden, die in anderen Programmiersprachen die Verwendung aufwändiger Schleifen erfordern. Ein berühmtes Beispiel dafür ist die so genannte indexterm:[Schwartzsche Transformation] ``Schwartzsche Transformation'', benannt nach ihrem Erfinder Randall Schwartz. Ihre Betrachtung würde allerdings den Rahmen sprengen; sie ist in einem weiterführenden Kurs besser aufgehoben.



=== Gürtelprüfung 

image:image/judogi.jpg[width=200]

Jetzt ist es schon der grüne Gürtel, den Sie mit Abschluss der folgenden Fragen und Übungen erreichen!

Der 6. Kyu ist schon etwas anspruchsvoller als die vorigen Grade, weshalb auch die Übungen ein wenig mehr von Ihnen verlangen. Aber wie heißt es so schön? ``Man wächst mit den Anforderungen!'' 


==== Übung

1. Erläutern Sie die Unterschiede zwischen einem Array und einem
  Hash. Wie werden jeweils die einzelnen Elemente angesprochen?
2. Was ist eine Liste?
3. Wie können Sie einen Zahlenbereich als Liste angeben?
4. Was ist der effizienteste Weg, um die Reihe der natürlichen Zahlen 0, -1, -2, ..., -10 als Liste zu erzeugen?
5. Mit welchem Zeichen werden Arrays, Hashs und skalare Variablen
  gekennzeichnet?
6. Welche Daten können in einer Liste verwendet werden?
7. Welche Auswirkungen haben die Anweisungen `push` und `shift` auf ein Array?
8. Mit welchen Schleifen können Sie Arrays und Hashs durchlaufen?
  Geben Sie die grundsätzliche Syntax der Schleifen an.


==== Übung

Erstellen Sie ein Programm `sort-namen.pl`, das alle Vornamen, die Sie per Tastatur eingegeben haben, sortiert ausgibt.

* Verwenden Sie eine geeignete Schleife, um das Einlesen der Daten von der
Tastatur und das Speichern in einem Array zu realisieren.
* Löschen Sie bei jedem eingegebenen Namen das Zeilenvorschubzeichen.
* Die Schleife soll beendet werden, wenn kein Name eingegeben wurde.
* Stellen Sie sicher, dass das Array hinterher kein leeres Element enthält.
* Geben Sie alle eingegebenen Namen aufsteigend sortiert aus.


==== Übung

Erstellen Sie ein Programm `vorwahl.pl`, das für verschiedene deutsche Städte die Telefonvorwahl in einem Datenfeld speichert und nach Eingabe eines Ortes anzeigt.

* Speichern Sie die folgenden Orte mit der entsprechenden Vorwahl in einem
Hash.

[options="headers",width="50%",cols="60%,40%"]
|=====================
| Ort        | Vorwahl
| Berlin     | 030
| Hamburg    | 040
| München    | 089
| Stuttgart  | 0711
| Rostock    | 0381
| Wiesbaden  | 0611
| Erfurt     | 0361
| Frankfurt  | 069
| Leipzig    | 0341
| Düsseldorf | 0211
| Köln       | 0221
| Dresden    | 0351
| Hannover   | 0511
|=====================

* Geben Sie zuerst informativ alle gespeicherten Orte in alphabetischer
Reihenfolge am Bildschim aus. Trennen Sie die einzelnen Elemente mit einem
Leerzeichen.
* Realisieren Sie eine Abfrage, die eine Ortsangabe von der Tastatur
einliest. Entfernen Sie den Zeilenvorschub am Ende der Eingabe.
* Überprüfen Sie, ob eine Vorwahl für den eingegebenen Ort verfügbar ist.
Ist dies der Fall, zeigen Sie den Ortsnamen und die entsprechende Vorwahl an.
Anderenfalls zeigen Sie eine Fehlermeldung an.
* Ermöglichen Sie dem Benutzer, die Suche zu wiederholen, indem Sie eine
entsprechende Ja/Nein-Abfrage einbinden.


==== Übung

Warum funktioniert das folgende Programm nicht wie gewünscht? Wie muss es korrigiert werden?
		
[source,perl]
----
#!/usr/bin/perl

my %ort_mit_vorwahl = (
        '0621' => 'Mannheim',
        '0721' => 'Karlsruhe',
        '0761' => 'Freiburg',
        );
my $ort_gesucht = 'Freiburg';
        
my $vorwahl;

foreach $vorwahl (keys %ort_mit_vorwahl) {
    last if 
        $ort_mit_vorwahl{$vorwahl} eq $ort_gesucht;
}

print 'Die Vorwahl von ', $ort_gesucht,
    ' lautet ', $vorwahl, "\n";
----
